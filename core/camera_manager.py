# core/camera_manager.py
"""
Модуль управления веб-камерой системы
Автор: Студент 4 курса ОмГУ им. Ф.М. Достоевского
ВКР: Автоматизированная система распознавания лиц

Описание:
Контроллер веб-камеры обеспечивает централизованное управление
захватом видеопотока для системы распознавания лиц. Инкапсулирует
взаимодействие с OpenCV VideoCapture и управляет жизненным циклом
камеры с proper cleanup ресурсов.

Основные функции:
- Инициализация и конфигурация веб-камеры
- Управление состоянием (запуск/остановка)
- Захват кадров в реальном времени
- Автоматическое освобождение ресурсов

Архитектурные принципы:
- Singleton-подобное поведение (одна камера на систему)
- Graceful shutdown с proper resource cleanup
- Обработка ошибок подключения к камере
"""

import cv2  # Библиотека компьютерного зрения для работы с камерой
from config.settings import CAMERA_WIDTH, CAMERA_HEIGHT


class CameraController:
    """
    Контроллер управления веб-камерой для системы распознавания лиц
    
    Класс обеспечивает абстракцию над OpenCV VideoCapture для
    удобного управления веб-камерой в контексте системы безопасности.
    Реализует паттерн Resource Acquisition Is Initialization (RAII)
    для безопасного управления ресурсами камеры.
    
    Особенности реализации:
    - Автоматическая настройка разрешения камеры при инициализации
    - Проверка доступности устройства перед началом работы
    - Graceful shutdown с освобождением системных ресурсов
    - Проверка состояния для предотвращения некорректных операций
    
    Attributes:
        camera_capture (cv2.VideoCapture): Объект захвата видео OpenCV
        is_active (bool): Флаг активности камеры
    """
    
    def __init__(self):
        """
        Инициализация контроллера камеры
        
        Создает объект в неактивном состоянии. Фактическая инициализация
        камеры происходит при вызове start_camera() для ленивой загрузки
        и экономии ресурсов системы.
        """
        self.camera_capture = None  # Объект захвата видео (инициализируется при запуске)
        self.is_active = False      # Флаг состояния камеры
    
    def start_camera(self):
        """
        Инициализация и запуск веб-камеры
        
        Выполняет полную инициализацию камеры:
        1. Создание объекта VideoCapture для устройства по умолчанию (индекс 0)
        2. Проверка доступности камеры
        3. Настройка разрешения захвата согласно конфигурации
        4. Активация флага состояния
        
        Returns:
            bool: True если камера успешно инициализирована и готова к работе,
                  False при ошибке подключения или недоступности устройства
                  
        Note:
            Использует индекс 0 для подключения к камере по умолчанию.
            В системах с несколькими камерами может потребоваться настройка индекса.
        """
        try:
            # Создание объекта захвата видео для камеры по умолчанию
            # Индекс 0 соответствует первой доступной камере в системе
            self.camera_capture = cv2.VideoCapture(0)
            
            # Проверка успешности инициализации камеры
            if not self.camera_capture.isOpened():
                # Камера недоступна или занята другим процессом
                return False
            
            # Настройка разрешения захвата согласно конфигурации системы
            # Установка ширины кадра
            self.camera_capture.set(cv2.CAP_PROP_FRAME_WIDTH, CAMERA_WIDTH)
            # Установка высоты кадра
            self.camera_capture.set(cv2.CAP_PROP_FRAME_HEIGHT, CAMERA_HEIGHT)
            
            # Активация флага состояния
            self.is_active = True
            return True
            
        except Exception:
            # Обработка любых исключений при инициализации камеры
            # Может возникнуть при отсутствии драйверов или аппаратных проблемах
            return False
    
    def stop_camera(self):
        """
        Остановка камеры и освобождение ресурсов
        
        Выполняет graceful shutdown камеры:
        1. Деактивация флага состояния
        2. Освобождение ресурсов VideoCapture
        3. Очистка объекта захвата
        
        Следует принципу RAII (Resource Acquisition Is Initialization)
        для безопасного освобождения системных ресурсов и предотвращения
        утечек памяти и блокировки устройства.
        """
        # Деактивация флага состояния (предотвращает дальнейшие операции)
        self.is_active = False
        
        # Освобождение ресурсов камеры если объект существует
        if self.camera_capture:
            # Закрытие соединения с устройством и освобождение ресурсов
            self.camera_capture.release()
            # Очистка ссылки на объект
            self.camera_capture = None
    
    def capture_frame(self):
        """
        Захват одного кадра с камеры
        
        Выполняет захват текущего кадра с веб-камеры для последующей
        обработки алгоритмами распознавания лиц. Включает проверки
        состояния для предотвращения ошибок при неактивной камере.
        
        Returns:
            numpy.ndarray or None: Кадр изображения в формате BGR (Blue-Green-Red)
                                  или None при ошибке захвата или неактивной камере
                                  
        Note:
            Возвращаемый кадр имеет формат numpy массива с размерностью (height, width, 3)
            где третья размерность представляет цветовые каналы в порядке BGR.
        """
        # Проверка активности камеры и наличия объекта захвата
        if not self.is_active or not self.camera_capture:
            return None
        
        # Захват кадра с камеры
        # ret - флаг успешности операции, frame - сам кадр
        ret, frame = self.camera_capture.read()
        
        # Возврат кадра только при успешном захвате
        return frame if ret else None
    
    def is_camera_active(self):
        """
        Проверка активности камеры
        
        Возвращает текущее состояние камеры для управления логикой
        приложения и предотвращения операций с неактивной камерой.
        
        Returns:
            bool: True если камера активна и готова к захвату кадров,
                  False если камера остановлена или не инициализирована
        """
        return self.is_active