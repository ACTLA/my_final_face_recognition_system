# gui/audit_widget.py
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import datetime

class AuditWidget:
    """–í–∏–¥–∂–µ—Ç –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, parent_notebook, audit_logger):
        self.notebook = parent_notebook
        self.audit = audit_logger
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
        self.setup_widget()
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self.auto_refresh()
    
    def setup_widget(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏ –∞—É–¥–∏—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –≤–∫–ª–∞–¥–∫–∏
        self.frame = tk.Frame(self.notebook, bg="#6B46C1")
        self.notebook.add(self.frame, text="  üìã –ñ—É—Ä–Ω–∞–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏  ")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.frame, bg="#6B46C1")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.create_statistics_panel(main_container)
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
        self.create_events_panel(main_container)
    
    def create_statistics_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_container = tk.Frame(parent, bg="white", relief="raised", bd=2)
        stats_container.pack(fill="x", pady=(0, 15))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        stats_header = tk.Frame(stats_container, bg="#7C3AED", height=40)
        stats_header.pack(fill="x")
        stats_header.pack_propagate(False)
        
        stats_title = tk.Label(stats_header, text="–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò", 
                             font=("Arial", 12, "bold"), bg="#7C3AED", fg="white")
        stats_title.pack(expand=True)
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_content = tk.Frame(stats_container, bg="white")
        stats_content.pack(fill="x", padx=15, pady=15)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        self.create_statistics_cards(stats_content)
    
    def create_statistics_cards(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_row = tk.Frame(parent, bg="white")
        stats_row.pack(fill="x")
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ 1 - –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫
        card1 = tk.Frame(stats_row, bg="#F8FAFC", relief="solid", bd=1)
        card1.pack(side="left", fill="both", expand=True, padx=(0, 5))
        
        tk.Label(card1, text="–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è:", font=("Arial", 9), 
                bg="#F8FAFC", fg="#6B7280").pack(anchor="w", padx=10, pady=(8, 2))
        self.total_attempts_label = tk.Label(card1, text="0", font=("Arial", 14, "bold"), 
                                           bg="#F8FAFC", fg="#3B82F6")
        self.total_attempts_label.pack(anchor="w", padx=10, pady=(0, 8))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ 2 - –£—Å–ø–µ—à–Ω—ã—Ö
        card2 = tk.Frame(stats_row, bg="#F8FAFC", relief="solid", bd=1)
        card2.pack(side="left", fill="both", expand=True, padx=(5, 5))
        
        tk.Label(card2, text="–£—Å–ø–µ—à–Ω—ã—Ö:", font=("Arial", 9), 
                bg="#F8FAFC", fg="#6B7280").pack(anchor="w", padx=10, pady=(8, 2))
        self.successful_label = tk.Label(card2, text="0", font=("Arial", 14, "bold"), 
                                       bg="#F8FAFC", fg="#10B981")
        self.successful_label.pack(anchor="w", padx=10, pady=(0, 8))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ 3 - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
        card3 = tk.Frame(stats_row, bg="#F8FAFC", relief="solid", bd=1)
        card3.pack(side="left", fill="both", expand=True, padx=(5, 5))
        
        tk.Label(card3, text="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:", font=("Arial", 9), 
                bg="#F8FAFC", fg="#6B7280").pack(anchor="w", padx=10, pady=(8, 2))
        self.success_rate_label = tk.Label(card3, text="0%", font=("Arial", 14, "bold"), 
                                         bg="#F8FAFC", fg="#F59E0B")
        self.success_rate_label.pack(anchor="w", padx=10, pady=(0, 8))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ 4 - –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        card4 = tk.Frame(stats_row, bg="#F8FAFC", relief="solid", bd=1)
        card4.pack(side="left", fill="both", expand=True, padx=(5, 0))
        
        tk.Label(card4, text="–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", font=("Arial", 9), 
                bg="#F8FAFC", fg="#6B7280").pack(anchor="w", padx=10, pady=(8, 2))
        self.last_activity_label = tk.Label(card4, text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", font=("Arial", 14, "bold"), 
                                          bg="#F8FAFC", fg="#6B7280")
        self.last_activity_label.pack(anchor="w", padx=10, pady=(0, 8))
    
    def create_events_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π"""
        log_container = tk.Frame(parent, bg="white", relief="raised", bd=2)
        log_container.pack(fill="both", expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.create_events_header(log_container)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
        self.create_events_table(log_container)
    
    def create_events_header(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π"""
        log_header = tk.Frame(parent, bg="#7C3AED", height=40)
        log_header.pack(fill="x")
        log_header.pack_propagate(False)
        
        log_title = tk.Label(log_header, text="–ñ–£–†–ù–ê–õ –°–û–ë–´–¢–ò–ô", 
                           font=("Arial", 12, "bold"), bg="#7C3AED", fg="white")
        log_title.pack(side="left", expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_btn = tk.Button(log_header, text="–≠–∫—Å–ø–æ—Ä—Ç", 
                             font=("Arial", 10, "bold"), bg="#10B981", fg="white",
                             relief="flat", padx=15, pady=6, command=self.export_csv)
        export_btn.pack(side="right", padx=(5, 15))
    
    def create_events_table(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π"""
        log_content = tk.Frame(parent, bg="white")
        log_content.pack(fill="both", expand=True, padx=10, pady=10)
        
        columns = ("–í—Ä–µ–º—è", "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è", "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        self.events_tree = ttk.Treeview(log_content, columns=columns, show="headings")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.events_tree.heading(col, text=col)
        
        self.events_tree.column("–í—Ä–µ–º—è", width=120)
        self.events_tree.column("–¢–∏–ø —Å–æ–±—ã—Ç–∏—è", width=180)
        self.events_tree.column("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", width=120)
        self.events_tree.column("–†–µ–∑—É–ª—å—Ç–∞—Ç", width=100)
        self.events_tree.column("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", width=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar_events = ttk.Scrollbar(log_content, orient="vertical", 
                                        command=self.events_tree.yview)
        self.events_tree.configure(yscrollcommand=scrollbar_events.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.events_tree.pack(side="left", fill="both", expand=True)
        scrollbar_events.pack(side="right", fill="y")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∫
        self.events_tree.tag_configure("success", background="#F0FDF4")
        self.events_tree.tag_configure("failed", background="#FEF2F2")
        self.events_tree.tag_configure("system", background="#F8FAFC")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.refresh_data()
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∫–ª–∞–¥–∫–µ"""
        try:
            stats = self.audit.get_statistics(days=1)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            if stats:
                self.update_statistics(stats)
                self.update_events_table(stats)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞: {e}")
    
    def update_statistics(self, stats):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_attempts = 0
        successful = 0
        
        for stat in stats['general_stats']:
            event_type, result, count, avg_confidence = stat
            if event_type == 'recognition_attempt':
                total_attempts += count
                if result == 'success':
                    successful += count
        
        success_rate = (successful / total_attempts * 100) if total_attempts > 0 else 0
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        last_activity = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if stats['recent_events']:
            last_timestamp = stats['recent_events'][0][0]
            last_time = datetime.datetime.fromisoformat(last_timestamp)
            last_activity = last_time.strftime('%H:%M:%S')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–π–±–ª–æ–≤
        self.total_attempts_label.config(text=str(total_attempts))
        self.successful_label.config(text=str(successful))
        self.success_rate_label.config(text=f"{success_rate:.1f}%")
        self.last_activity_label.config(text=last_activity)
    
    def update_events_table(self, stats):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.events_tree.get_children():
            self.events_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        for event in stats['recent_events']:
            timestamp = datetime.datetime.fromisoformat(event[0])
            formatted_time = timestamp.strftime('%H:%M:%S')
            
            # –ü–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
            event_types = {
                'recognition_attempt': '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ',
                'user_added': '–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                'user_deleted': '–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                'user_photo_updated': '–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ',
                'system_start': '–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã',
                'camera_start': '–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã',
                'camera_stop': '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã',
                'encodings_loaded': '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫'
            }
            
            event_type = event_types.get(event[1], event[1])
            user_id = event[2] if event[2] else "‚Äî"
            result = "‚úÖ –£—Å–ø–µ—Ö" if event[3] == 'success' else "‚ùå –ù–µ—É–¥–∞—á–∞"
            confidence = f"{event[4]:.3f}" if event[4] is not None else "‚Äî"
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –¥–ª—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
            if event[1] == 'recognition_attempt':
                tag = "success" if event[3] == 'success' else "failed"
            elif event[1] in ['user_added', 'user_deleted', 'user_photo_updated']:
                tag = "success" if event[3] == 'success' else "failed"
            else:
                tag = "system"
            
            self.events_tree.insert("", "end", 
                                  values=(formatted_time, event_type, user_id, result, confidence),
                                  tags=(tag,))
    
    def export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∞—É–¥–∏—Ç–∞",
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv")]
        )
        
        if file_path:
            if self.audit.export_to_csv(file_path, days=7):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤:\n{file_path}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç!")
    
    def auto_refresh(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥"""
        self.refresh_data()
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.frame.after(5000, self.auto_refresh)