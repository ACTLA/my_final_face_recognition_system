# gui/main_application.py
import tkinter as tk
from tkinter import ttk
import os
from core.database_manager import DatabaseManager
from core.face_engine import FaceRecognitionEngine
from core.camera_manager import CameraManager
from gui.recognition_widget import RecognitionWidget
from gui.management_widget import ManagementWidget
from config.settings import *

class FaceRecognitionApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
    
    def __init__(self, root):
        self.root = root
        self.root.title(APP_TITLE)
        self.root.geometry(WINDOW_SIZE)
        self.root.configure(bg=THEME_COLOR)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db = DatabaseManager()
        self.face_engine = FaceRecognitionEngine()
        self.camera_manager = CameraManager()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
        self.audit = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if not os.path.exists(PHOTOS_DIR):
            os.makedirs(PHOTOS_DIR)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫
        self.load_encodings()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_notebook()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤–∫–ª–∞–¥–æ–∫
        self.create_tabs()
    
    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_frame = tk.Frame(self.root, bg=THEME_COLOR, height=80)
        header_frame.pack(fill="x", padx=20, pady=(20, 0))
        header_frame.pack_propagate(False)
        
        title_frame = tk.Frame(header_frame, bg=THEME_COLOR)
        title_frame.pack(side="left", fill="y")
        
        # –ò–∫–æ–Ω–∫–∞
        icon_label = tk.Label(title_frame, text="üë§", font=("Arial", 24), 
                             bg=THEME_COLOR, fg="white")
        icon_label.pack(side="left", padx=(0, 10))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        title_label = tk.Label(title_frame, text="–°–ò–°–¢–ï–ú–ê –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –õ–ò–¶", 
                              font=("Arial", 18, "bold"), bg=THEME_COLOR, fg="white")
        title_label.pack(side="left")
    
    def create_notebook(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –≤–∫–ª–∞–¥–æ–∫"""
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('Custom.TNotebook.Tab', 
                       padding=[20, 10], 
                       font=('Arial', 12, 'bold'))
        
        self.notebook = ttk.Notebook(self.root, style='Custom.TNotebook')
        self.notebook.pack(fill="both", expand=True, padx=20, pady=(0, 20))
    
    def create_tabs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤–∫–ª–∞–¥–æ–∫"""
        # –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.recognition_widget = RecognitionWidget(
            self.notebook, 
            self.camera_manager, 
            self.face_engine, 
            self.db
        )
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        self.management_widget = ManagementWidget(
            self.notebook, 
            self.db, 
            self.face_engine,
            self.load_encodings  # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–æ–∫
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏—Ç –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        self.recognition_widget.set_audit_logger(lambda: self.audit)
        self.management_widget.set_audit_logger(lambda: self.audit)
    
    def load_encodings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫ –ª–∏—Ü"""
        try:
            encodings, user_ids = self.db.get_all_encodings()
            self.face_engine.load_encodings(encodings, user_ids)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if self.audit:
                self.audit.log_system_event("encodings_loaded", "success")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–æ–∫: {e}")
            if self.audit:
                self.audit.log_system_event("encodings_loaded", "failed")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
        self.recognition_widget.stop_camera()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.root.destroy()