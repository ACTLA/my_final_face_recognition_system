# gui/main_application.py
"""
Модуль главного приложения системы распознавания лиц
Автор: Студент 4 курса ОмГУ им. Ф.М. Достоевского
ВКР: Автоматизированная система распознавания лиц

Описание:
Главное приложение системы интегрирует все компоненты в единую
программную систему с графическим интерфейсом. Реализует архитектурный
паттерн МВК (модель-представление-контроллер) для разделения логики и представления.

Основные компоненты:
- Координация работы всех подсистем
- Инициализация графического интерфейса
- Управление жизненным циклом приложения
- Интеграция системы аудита безопасности

Архитектурные решения:
- Внедрение зависимостей для слабой связанности компонентов
- Архитектура, управляемая событиями, для взаимодействия виджетов
- Централизованное управление ресурсами
"""

import tkinter as tk  # Основная библиотека для создания графического интерфейса
from tkinter import ttk  # Тематические виджеты для современного внешнего вида
import os  # Операции с файловой системой
from core.database_manager import DatabaseManager
from core.face_engine import FaceAnalysisEngine
from core.camera_manager import CameraController
from gui.recognition_widget import FaceRecognitionWidget
from gui.management_widget import UserManagementWidget
from config.settings import *


class FaceRecognitionSystem:
    """
    Главный класс системы распознавания лиц
    
    Координирует работу всех подсистем и обеспечивает единую точку входа
    в приложение. Реализует паттерн Фасад для упрощения взаимодействия
    между сложными подсистемами.
    
    Ключевые обязанности:
    - Инициализация всех компонентов системы
    - Настройка графического интерфейса
    - Координация межкомпонентного взаимодействия
    - Управление жизненным циклом ресурсов
    - Интеграция системы аудита безопасности
    
    Архитектурные паттерны:
    - Фасад: Упрощение доступа к подсистемам
    - Внедрение зависимостей: Передача зависимостей через конструктор
    - Наблюдатель: Уведомления о событиях через функции обратного вызова
    """
    
    def __init__(self, root):
        """
        Инициализация системы распознавания лиц
        
        Выполняет полную инициализацию системы:
        1. Настройка главного окна приложения
        2. Создание основных компонентов (БД, камера, движок)
        3. Инициализация файловой структуры
        4. Загрузка биометрических данных
        5. Создание пользовательского интерфейса
        
        Аргументы:
            root (tk.Tk): Корневое окно tkinter приложения
        """
        # Сохранение ссылки на корневое окно
        self.root = root
        
        # Настройка главного окна приложения
        self.root.title(APP_TITLE)
        self.root.geometry(WINDOW_SIZE)
        self.root.configure(bg=THEME_COLOR)
        
        # Инициализация основных компонентов системы
        self.db = DatabaseManager()  # Менеджер базы данных пользователей
        self.face_engine = FaceAnalysisEngine()  # Движок анализа лиц
        self.camera_manager = CameraController()  # Контроллер веб-камеры
        
        # Переменная для системы аудита (устанавливается при интеграции)
        # Использует паттерн внедрения зависимостей для слабой связанности
        self.audit = None
        
        # Инициализация файловой структуры проекта
        self._initialize_file_structure()
        
        # Загрузка биометрических отпечатков в память
        self.load_facial_encodings()
        
        # Создание пользовательского интерфейса
        self.initialize_user_interface()
    
    def _initialize_file_structure(self):
        """
        Создание необходимой файловой структуры проекта
        
        Обеспечивает наличие всех необходимых директорий для корректной
        работы системы. Использует ленивую инициализацию для создания
        папок только при необходимости.
        """
        # Создание папки для хранения фотографий пользователей
        if not os.path.exists(PHOTOS_DIR):
            os.makedirs(PHOTOS_DIR)
    
    def initialize_user_interface(self):
        """
        Создание и настройка пользовательского интерфейса
        
        Инициализирует графический интерфейс в следующем порядке:
        1. Создание заголовка приложения
        2. Настройка контейнера вкладок
        3. Инициализация виджетов функциональности
        4. Настройка внедрения зависимостей для аудита
        """
        # Создание заголовка приложения
        self.create_application_header()
        
        # Инициализация контейнера вкладок
        self.initialize_tab_container()
        
        # Создание функциональных виджетов
        self.setup_interface_tabs()
    
    def create_application_header(self):
        """
        Создание заголовка главного окна приложения
        
        Создает брендированный заголовок с:
        - Иконкой системы
        - Названием приложения
        - Фирменными цветами
        """
        # Контейнер заголовка с фиксированной высотой
        header_frame = tk.Frame(self.root, bg=THEME_COLOR, height=80)
        header_frame.pack(fill="x", padx=20, pady=(20, 0))
        header_frame.pack_propagate(False)  # Предотвращение автоматического изменения размера
        
        # Левая часть заголовка с иконкой и названием
        title_frame = tk.Frame(header_frame, bg=THEME_COLOR)
        title_frame.pack(side="left", fill="y")
        
        # Название системы
        title_label = tk.Label(title_frame, text="  СИСТЕМА РАСПОЗНАВАНИЯ ЛИЦ   ", 
                              font=("Arial", 18, "bold"), bg=THEME_COLOR, fg="white")
        title_label.pack(side="left")
    
    def initialize_tab_container(self):
        """
        Создание и настройка контейнера вкладок
        
        Инициализирует ttk.Notebook с пользовательским стилем для создания
        современного интерфейса с вкладками.
        """
        # Настройка стиля вкладок
        style = ttk.Style()
        style.theme_use('clam')  # Использование современной темы
        style.configure('Custom.TNotebook.Tab', 
                       padding=[20, 10],  # Внутренние отступы вкладок
                       font=('Arial', 12, 'bold'))  # Шрифт заголовков вкладок
        
        # Создание контейнера вкладок
        self.notebook = ttk.Notebook(self.root, style='Custom.TNotebook')
        self.notebook.pack(fill="both", expand=True, padx=20, pady=(0, 20))
    
    def setup_interface_tabs(self):
        """
        Создание и инициализация всех функциональных виджетов
        
        Создает основные виджеты системы:
        1. Виджет распознавания лиц в режиме реального времени
        2. Виджет управления пользователями
        
        Настраивает внедрение зависимостей для интеграции с системой аудита.
        """
        # Виджет распознавания лиц в режиме реального времени
        self.recognition_widget = FaceRecognitionWidget(
            self.notebook,           # Родительский контейнер вкладок
            self.camera_manager,     # Контроллер камеры
            self.face_engine,        # Движок анализа лиц
            self.db                  # Менеджер базы данных
        )
        
        # Виджет управления пользователями
        self.management_widget = UserManagementWidget(
            self.notebook,               # Родительский контейнер вкладок
            self.db,                     # Менеджер базы данных
            self.face_engine,            # Движок анализа лиц
            self.load_facial_encodings   # Функция обратного вызова для обновления кодировок
        )
        
        # Настройка внедрения зависимостей для системы аудита
        # Передача лямбда-функции для ленивого получения логгера аудита
        self.recognition_widget.set_audit_logger(lambda: self.audit)
        self.management_widget.set_audit_logger(lambda: self.audit)
    
    def load_facial_encodings(self):
        """
        Загрузка биометрических отпечатков лиц в движок распознавания
        
        Извлекает все биометрические отпечатки из базы данных и
        загружает их в движок анализа лиц для обеспечения быстрого
        распознавания в режиме реального времени.
        
        Вызывается при:
        - Запуске системы
        - Добавлении нового пользователя
        - Обновлении фотографии пользователя
        - Удалении пользователя
        """
        try:
            # Извлечение биометрических данных из базы
            encodings, user_ids = self.db.get_all_facial_encodings()
            
            # Загрузка в движок анализа лиц
            self.face_engine.load_facial_encodings(encodings, user_ids)
            
            # Логирование успешной загрузки в систему аудита
            if self.audit:
                self.audit.log_system_security_event("encodings_loaded", "success")
            
        except Exception as e:
            # Обработка ошибок загрузки с логированием
            print(f"Ошибка загрузки биометрических отпечатков: {e}")
            if self.audit:
                self.audit.log_system_security_event("encodings_loaded", "failed")
    
    def handle_application_shutdown(self):
        """
        Обработка корректного завершения работы приложения
        
        Выполняет мягкое завершение всех компонентов системы:
        1. Остановка камеры и освобождение ресурсов
        2. Закрытие соединений с базой данных
        3. Логирование события завершения работы
        4. Завершение работы графического интерфейса
        
        Следует принципу RAII для предотвращения утечек ресурсов
        и корректного завершения всех активных процессов.
        """
        try:
            # Остановка камеры если она активна
            if self.camera_manager.is_camera_active():
                self.recognition_widget.stop_camera()
            
            # Логирование корректного завершения работы
            if self.audit:
                self.audit.log_system_security_event("system_shutdown", "success")
            
        except Exception as e:
            # Логирование ошибок при завершении работы
            print(f"Ошибка при завершении работы: {e}")
        finally:
            # Гарантированное закрытие приложения
            self.root.destroy()