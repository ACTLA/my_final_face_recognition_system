# gui/management_widget.py
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
import os
import shutil
from config.settings import PHOTOS_DIR

class ManagementWidget:
    """–í–∏–¥–∂–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, parent_notebook, db, face_engine, load_encodings_callback):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.notebook = parent_notebook
        self.db = db
        self.face_engine = face_engine
        self.load_encodings_callback = load_encodings_callback
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–∏–¥–∂–µ—Ç–∞
        self.photo_path = ""  # –ü—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self.get_audit_logger = None  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∞—É–¥–∏—Ç–∞
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∏–¥–∂–µ—Ç–∞
        self.setup_widget()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.refresh_user_list()
    
    def set_audit_logger(self, get_audit_func):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç –ª–æ–≥–≥–µ—Ä–∞"""
        self.get_audit_logger = get_audit_func
    
    def setup_widget(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –≤–∫–ª–∞–¥–∫–∏
        self.frame = tk.Frame(self.notebook, bg="#6B46C1")
        self.notebook.add(self.frame, text="  üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏  ")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.frame, bg="#6B46C1")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –¥–ª—è –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
        main_container.grid_columnconfigure(0, weight=1)
        main_container.grid_columnconfigure(1, weight=1)
        main_container.grid_rowconfigure(0, weight=1)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.create_add_panel(main_container)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.create_list_panel(main_container)
    
    def create_add_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        left_panel = tk.Frame(parent, bg="white", relief="raised", bd=2)
        left_panel.grid(row=0, column=0, sticky="nsew", padx=(0, 5))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        header_frame = tk.Frame(left_panel, bg="#7C3AED", height=40)
        header_frame.pack(fill="x")
        header_frame.pack_propagate(False)
        
        title = tk.Label(header_frame, text="–î–û–ë–ê–í–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø", 
                        font=("Arial", 12, "bold"), bg="#7C3AED", fg="white")
        title.pack(expand=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏
        content = tk.Frame(left_panel, bg="white")
        content.pack(fill="both", expand=True, padx=15, pady=15)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.create_input_fields(content)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self.create_photo_selection(content)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.create_add_button(content)
    
    def create_input_fields(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        id_frame = tk.Frame(parent, bg="white")
        id_frame.pack(fill="x", pady=(0, 10))
        
        tk.Label(id_frame, text="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", font=("Arial", 10, "bold"), 
                bg="white", fg="#374151").pack(anchor="w")
        self.user_id_entry = tk.Entry(id_frame, font=("Arial", 10), relief="solid", bd=1)
        self.user_id_entry.pack(fill="x", pady=(3, 0), ipady=3)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name_frame = tk.Frame(parent, bg="white")
        name_frame.pack(fill="x", pady=(0, 10))
        
        tk.Label(name_frame, text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", font=("Arial", 10, "bold"), 
                bg="white", fg="#374151").pack(anchor="w")
        self.name_entry = tk.Entry(name_frame, font=("Arial", 10), relief="solid", bd=1)
        self.name_entry.pack(fill="x", pady=(3, 0), ipady=3)
    
    def create_photo_selection(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_frame = tk.Frame(parent, bg="white")
        photo_frame.pack(fill="x", pady=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        tk.Label(photo_frame, text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:", font=("Arial", 10, "bold"), 
                bg="white", fg="#374151").pack(anchor="w", pady=(0, 5))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        preview_container = tk.Frame(photo_frame, bg="#F3F4F6", relief="solid", bd=1, 
                                   width=120, height=120)
        preview_container.pack(pady=(0, 6))
        preview_container.pack_propagate(False)
        
        # –õ–µ–π–±–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
        self.photo_preview = tk.Label(preview_container, text="–ü—Ä–µ–≤—å—é", 
                                     bg="#F3F4F6", font=("Arial", 8), fg="#6B7280")
        self.photo_preview.pack(fill="both", expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        select_btn = tk.Button(photo_frame, text="–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ", 
                              font=("Arial", 9, "bold"), bg="#6366F1", fg="white",
                              relief="flat", padx=10, pady=5, command=self.select_photo)
        select_btn.pack(fill="x")
        
        # –õ–µ–π–±–ª —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self.photo_status_label = tk.Label(photo_frame, text="–§–æ—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", 
                                          font=("Arial", 8), bg="white", fg="#6B7280")
        self.photo_status_label.pack(pady=(5, 0))
    
    def create_add_button(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = tk.Frame(parent, bg="white")
        actions_frame.pack(fill="x", pady=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        add_btn = tk.Button(actions_frame, text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                           font=("Arial", 10, "bold"), bg="#10B981", fg="white",
                           relief="flat", padx=15, pady=8, command=self.add_user)
        add_btn.pack(fill="x")
    
    def create_list_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        right_panel = tk.Frame(parent, bg="white", relief="raised", bd=2)
        right_panel.grid(row=0, column=1, sticky="nsew", padx=(5, 0))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        header_frame = tk.Frame(right_panel, bg="#7C3AED", height=40)
        header_frame.pack(fill="x")
        header_frame.pack_propagate(False)
        
        title = tk.Label(header_frame, text="–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô", 
                        font=("Arial", 12, "bold"), bg="#7C3AED", fg="white")
        title.pack(expand=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.create_users_table(right_panel)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        self.create_control_buttons(right_panel)
    
    def create_users_table(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        list_content = tk.Frame(parent, bg="white")
        list_content.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        columns = ("ID", "–ò–º—è", "–§–æ—Ç–æ")
        self.users_tree = ttk.Treeview(list_content, columns=columns, 
                                      show="headings", height=12)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        self.users_tree.heading("ID", text="ID")
        self.users_tree.heading("–ò–º—è", text="–ò–º—è")
        self.users_tree.heading("–§–æ—Ç–æ", text="–§–æ—Ç–æ")
        
        self.users_tree.column("ID", width=80)
        self.users_tree.column("–ò–º—è", width=120)
        self.users_tree.column("–§–æ—Ç–æ", width=100)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(list_content, orient="vertical", 
                                 command=self.users_tree.yview)
        self.users_tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.users_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def create_control_buttons(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls = tk.Frame(parent, bg="white", height=40)
        controls.pack(fill="x", padx=10, pady=(0, 10))
        controls.pack_propagate(False)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_btn = tk.Button(controls, text="–û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ", 
                              font=("Arial", 9, "bold"), bg="#F59E0B", fg="white",
                              relief="flat", padx=8, pady=6, command=self.update_user_photo)
        update_btn.pack(side="left", padx=(0, 3))
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delete_btn = tk.Button(controls, text="–£–¥–∞–ª–∏—Ç—å", 
                              font=("Arial", 9, "bold"), bg="#EF4444", fg="white",
                              relief="flat", padx=8, pady=6, command=self.delete_user)
        delete_btn.pack(side="left", padx=(0, 3))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        refresh_btn = tk.Button(controls, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                               font=("Arial", 9, "bold"), bg="#6366F1", fg="white",
                               relief="flat", padx=8, pady=6, command=self.refresh_user_list)
        refresh_btn.pack(side="left")
    
    def select_photo(self):
        """–í—ã–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp")]
        )
        
        if file_path:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            self.photo_path = file_path
            filename = os.path.basename(file_path)
            self.photo_status_label.config(text=f"‚úì {filename}", fg="#10B981")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–≤—å—é
                pil_image = Image.open(file_path)
                pil_image = pil_image.resize((110, 110), Image.Resampling.LANCZOS)
                photo_preview = ImageTk.PhotoImage(pil_image)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
                self.photo_preview.config(image=photo_preview, text="")
                self.photo_preview.image = photo_preview  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é: {e}")
                self.photo_preview.config(image="", text="–û—à–∏–±–∫–∞", 
                                        font=("Arial", 8), fg="#EF4444")
    
    def add_user(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        user_id = self.user_id_entry.get().strip()
        name = self.name_entry.get().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not user_id or not name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤—ã–±—Ä–∞–Ω–∞
        if not self.photo_path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_filename = f"{user_id}.jpg"
        photo_destination = os.path.join(PHOTOS_DIR, photo_filename)
        
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            shutil.copy2(self.photo_path, photo_destination)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –ª–∏—Ü–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            face_encoding = self.face_engine.create_face_encoding(photo_destination)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db.add_user(user_id, name, photo_destination, face_encoding):
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                audit = self.get_audit_logger() if self.get_audit_logger else None
                if audit:
                    audit.log_user_action("added", user_id, True)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
                
                # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                self.clear_form()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                self.refresh_user_list()
                self.load_encodings_callback()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ª–∏—Ü
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                audit = self.get_audit_logger() if self.get_audit_logger else None
                if audit:
                    audit.log_user_action("added", user_id, False)
                
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                # –£–¥–∞–ª—è–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
                if os.path.exists(photo_destination):
                    os.remove(photo_destination)
                    
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            audit = self.get_audit_logger() if self.get_audit_logger else None
            if audit:
                audit.log_user_action("added", user_id, False)
            
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    
    def update_user_photo(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ
        selected_item = self.users_tree.selection()
        if not selected_item:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                 "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤—ã–±—Ä–∞–Ω–∞
        if not self.photo_path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.users_tree.item(selected_item)
        user_id = user_data['values'][0]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?"):
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                photo_filename = f"{user_id}.jpg"
                photo_destination = os.path.join(PHOTOS_DIR, photo_filename)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(photo_destination):
                    os.remove(photo_destination)
                
                # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                shutil.copy2(self.photo_path, photo_destination)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –ª–∏—Ü–∞
                face_encoding = self.face_engine.create_face_encoding(photo_destination)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if self.db.update_user_encoding(user_id, face_encoding):
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    audit = self.get_audit_logger() if self.get_audit_logger else None
                    if audit:
                        audit.log_user_action("photo_updated", user_id, True)
                    
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                    
                    # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                    self.clear_form()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    self.refresh_user_list()
                    self.load_encodings_callback()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ª–∏—Ü
                else:
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    audit = self.get_audit_logger() if self.get_audit_logger else None
                    if audit:
                        audit.log_user_action("photo_updated", user_id, False)
                    
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –ë–î!")
                    
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                audit = self.get_audit_logger() if self.get_audit_logger else None
                if audit:
                    audit.log_user_action("photo_updated", user_id, False)
                
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ: {str(e)}")
    
    def delete_user(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ
        selected_item = self.users_tree.selection()
        if not selected_item:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                 "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.users_tree.item(selected_item)
        user_id = user_data['values'][0]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?"):
            if self.db.delete_user(user_id):
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                audit = self.get_audit_logger() if self.get_audit_logger else None
                if audit:
                    audit.log_user_action("deleted", user_id, True)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                self.refresh_user_list()
                self.load_encodings_callback()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ª–∏—Ü
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                audit = self.get_audit_logger() if self.get_audit_logger else None
                if audit:
                    audit.log_user_action("deleted", user_id, False)
                
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    
    def refresh_user_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
        for item in self.users_tree.get_children():
            self.users_tree.delete(item)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        users = self.db.get_all_users()
        for user in users:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo_name = os.path.basename(user[3]) if user[3] else "–ù–µ—Ç"
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É (ID, –ò–º—è, –§–æ—Ç–æ)
            self.users_tree.insert("", "end", values=(user[1], user[2], photo_name))
    
    def clear_form(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.user_id_entry.delete(0, tk.END)
        self.name_entry.delete(0, tk.END)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self.photo_path = ""
        self.photo_status_label.config(text="–§–æ—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", fg="#6B7280")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–≤—å—é –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.photo_preview.config(image="", text="–ü—Ä–µ–≤—å—é", 
                                 font=("Arial", 8), fg="#6B7280")