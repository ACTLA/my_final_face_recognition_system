# gui/recognition_widget.py
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import datetime
import os
import cv2
from config.settings import *

class RecognitionWidget:
    """–í–∏–¥–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
    
    def __init__(self, parent_notebook, camera_manager, face_engine, db):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.notebook = parent_notebook
        self.camera_manager = camera_manager
        self.face_engine = face_engine
        self.db = db
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è–º–∏
        self.last_recognition_time = None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.last_unknown_time = None      # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.last_recognition_timer = None # –¢–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç –ª–æ–≥–≥–µ—Ä–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.get_audit_logger = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        self.setup_widget()
    
    def set_audit_logger(self, get_audit_func):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç –ª–æ–≥–≥–µ—Ä–∞"""
        self.get_audit_logger = get_audit_func
    
    def setup_widget(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –≤–∫–ª–∞–¥–∫–∏
        self.frame = tk.Frame(self.notebook, bg=THEME_COLOR)
        self.notebook.add(self.frame, text="  üé• –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü  ")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.frame, bg=THEME_COLOR)
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞–º–µ—Ä–∞
        self.create_camera_panel(main_container)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.create_info_panel(main_container)
    
    def create_camera_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∫–∞–º–µ—Ä—ã"""
        # –°–æ–∑–¥–∞–µ–º –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π –¥–ª—è –∫–∞–º–µ—Ä—ã
        left_panel = tk.Frame(parent, bg="white", relief="raised", bd=2, width=500)
        left_panel.pack(side="left", fill="y", padx=(0, 10))
        left_panel.pack_propagate(False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ –∫–∞–º–µ—Ä—ã
        video_header = tk.Frame(left_panel, bg="#7C3AED", height=40)
        video_header.pack(fill="x")
        video_header.pack_propagate(False)
        
        video_title = tk.Label(video_header, text="–ö–ê–ú–ï–†–ê", 
                              font=("Arial", 12, "bold"), bg="#7C3AED", fg="white")
        video_title.pack(expand=True)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        video_container = tk.Frame(left_panel, bg="black", width=480, height=360)
        video_container.pack(padx=10, pady=10)
        video_container.pack_propagate(False)
        
        # –õ–µ–π–±–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.video_label = tk.Label(video_container, text="–ö–∞–º–µ—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", 
                                   bg="black", fg="white", font=("Arial", 12))
        self.video_label.pack(fill="both", expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
        self.create_camera_controls(left_panel)
    
    def create_camera_controls(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls = tk.Frame(parent, bg="white", height=50)
        controls.pack(fill="x", padx=10, pady=(0, 10))
        controls.pack_propagate(False)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã
        self.start_button = tk.Button(controls, text="–ó–∞–ø—É—Å–∫", 
                                     font=("Arial", 10, "bold"), bg="#10B981", fg="white",
                                     relief="flat", padx=15, pady=6, command=self.start_camera)
        self.start_button.pack(side="left", padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
        self.stop_button = tk.Button(controls, text="–°—Ç–æ–ø", 
                                    font=("Arial", 10, "bold"), bg="#EF4444", fg="white",
                                    relief="flat", padx=15, pady=6, command=self.stop_camera,
                                    state="disabled")
        self.stop_button.pack(side="left", padx=(0, 5))
    
    def create_info_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        right_panel = tk.Frame(parent, bg="white", relief="raised", bd=2)
        right_panel.pack(side="right", fill="both", expand=True)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_content = tk.Frame(right_panel, bg="white")
        info_content.pack(fill="both", expand=True, padx=15, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        header = tk.Label(info_content, text="–†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨", 
                         font=("Arial", 14, "bold"), bg="white", fg="#374151")
        header.pack(anchor="w", pady=(0, 15))
        
        # –°—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.status_label = tk.Label(info_content, text="‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...", 
                                    font=("Arial", 16, "bold"), bg="white", fg="#6B7280")
        self.status_label.pack(anchor="w", pady=(0, 15))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.create_user_info(info_content)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.create_photo_display(info_content)
    
    def create_user_info(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        info_container = tk.Frame(parent, bg="#F9FAFB", relief="solid", bd=1)
        info_container.pack(fill="x", pady=(0, 15))
        
        # –°—Ç—Ä–æ–∫–∞ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        id_frame = tk.Frame(info_container, bg="#F9FAFB")
        id_frame.pack(fill="x", padx=10, pady=8)
        
        tk.Label(id_frame, text="ID:", font=("Arial", 11, "bold"), 
                bg="#F9FAFB", fg="#374151").pack(side="left")
        self.user_id_label = tk.Label(id_frame, text="‚Äî", font=("Arial", 11), 
                                     bg="#F9FAFB", fg="#6B7280")
        self.user_id_label.pack(side="right")
        
        # –°—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name_frame = tk.Frame(info_container, bg="#F9FAFB")
        name_frame.pack(fill="x", padx=10, pady=8)
        
        tk.Label(name_frame, text="–ò–º—è:", font=("Arial", 11, "bold"), 
                bg="#F9FAFB", fg="#374151").pack(side="left")
        self.name_label = tk.Label(name_frame, text="‚Äî", font=("Arial", 11), 
                                  bg="#F9FAFB", fg="#6B7280")
        self.name_label.pack(side="right")
    
    def create_photo_display(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_frame = tk.Frame(parent, bg="white")
        photo_frame.pack(fill="x")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        tk.Label(photo_frame, text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:", font=("Arial", 11, "bold"), 
                bg="white", fg="#374151").pack(anchor="w", pady=(0, 8))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        photo_container = tk.Frame(photo_frame, bg="#F3F4F6", relief="solid", bd=1, 
                                  width=180, height=180)
        photo_container.pack(pady=(0, 10))
        photo_container.pack_propagate(False)
        
        # –õ–µ–π–±–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self.photo_display = tk.Label(photo_container, text="–ù–µ—Ç —Ñ–æ—Ç–æ", 
                                     bg="#F3F4F6", font=("Arial", 10), fg="#6B7280")
        self.photo_display.pack(fill="both", expand=True)
    
    def start_camera(self):
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã"""
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É
        if self.camera_manager.start_camera():
            # –ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞, –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã
            audit = self.get_audit_logger() if self.get_audit_logger else None
            if audit:
                audit.log_system_event("camera_start", "success")
            
            # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–¥—Ä–æ–≤
            self.process_frame()
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            audit = self.get_audit_logger() if self.get_audit_logger else None
            if audit:
                audit.log_system_event("camera_start", "failed")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ!")
    
    def stop_camera(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
        self.camera_manager.stop_camera()
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
        if self.last_recognition_timer:
            self.frame.after_cancel(self.last_recognition_timer)
            self.last_recognition_timer = None
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        self.last_recognition_time = None
        self.last_unknown_time = None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
        
        # –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.video_label.config(image="", text="–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.reset_user_info()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫–∞–º–µ—Ä—ã
        audit = self.get_audit_logger() if self.get_audit_logger else None
        if audit:
            audit.log_system_event("camera_stop", "success")
    
    def process_frame(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ —Å –∫–∞–º–µ—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if not self.camera_manager.is_camera_running():
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã
        frame = self.camera_manager.get_frame()
        if frame is None:
            # –ï—Å–ª–∏ –∫–∞–¥—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 30–º—Å
            self.frame.after(30, self.process_frame)
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –Ω–∞ –∫–∞–¥—Ä–µ
        recognized_faces = self.face_engine.recognize_faces(frame, FRAME_SCALE)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
        current_time = datetime.datetime.now()
        recognized_user = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∑–∞–¥–µ—Ä–∂–µ–∫
        can_recognize_known = self._can_recognize_known(current_time)
        can_recognize_unknown = self._can_recognize_unknown(current_time)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ
        for face_info in recognized_faces:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç —Ä–∞–º–∫–∏
            name, color = self._process_face(face_info, current_time, 
                                           can_recognize_known, can_recognize_unknown)
            
            # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞
            self.face_engine.draw_face_rectangle(frame, face_info, color, name)
            
            # –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if face_info['is_known'] and can_recognize_known:
                user_data = self.db.get_user(face_info['user_id'])
                if user_data:
                    recognized_user = user_data
                    self.last_recognition_time = current_time
                    self._schedule_info_clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if recognized_user:
            self.update_user_info(recognized_user)
        elif not recognized_faces and not self.last_recognition_timer:
            # –ï—Å–ª–∏ –ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.reset_user_info()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–¥—Ä –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        self._display_frame(frame)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞ —á–µ—Ä–µ–∑ 30–º—Å
        self.frame.after(30, self.process_frame)
    
    def _can_recognize_known(self, current_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞"""
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º
        if not self.last_recognition_time:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        elapsed = (current_time - self.last_recognition_time).total_seconds()
        return elapsed >= RECOGNITION_DELAY
    
    def _can_recognize_unknown(self, current_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞"""
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ, —Ä–∞–∑—Ä–µ—à–∞–µ–º
        if not self.last_unknown_time:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
        elapsed = (current_time - self.last_unknown_time).total_seconds()
        return elapsed >= UNKNOWN_FACE_DELAY
    
    def _process_face(self, face_info, current_time, can_recognize_known, can_recognize_unknown):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –∞—É–¥–∏—Ç–∞
        audit = self.get_audit_logger() if self.get_audit_logger else None
        
        if face_info['is_known']:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if can_recognize_known:
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å distance (–≤–º–µ—Å—Ç–æ confidence)
                if audit:
                    audit.log_recognition(face_info['user_id'], True, face_info['distance'])
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                user_data = self.db.get_user(face_info['user_id'])
                name = user_data[2] if user_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                color = (0, 255, 0)  # –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else:
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è)
                time_left = RECOGNITION_DELAY - (current_time - self.last_recognition_time).total_seconds()
                name = f"{time_left:.1f}s"
                color = (0, 255, 255)  # –ñ–µ–ª—Ç–∞—è —Ä–∞–º–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
            if can_recognize_unknown:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å distance (–≤–º–µ—Å—Ç–æ confidence)
                if audit:
                    audit.log_recognition(None, False, face_info['distance'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
                self.last_unknown_time = current_time
                name = ""  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
                color = (0, 0, 255)  # –ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
            else:
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è)
                time_left = UNKNOWN_FACE_DELAY - (current_time - self.last_unknown_time).total_seconds()
                name = f"{time_left:.1f}s"
                color = (0, 255, 255)  # –ñ–µ–ª—Ç–∞—è —Ä–∞–º–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        
        return name, color
    
    def _schedule_info_clear(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if self.last_recognition_timer:
            self.frame.after_cancel(self.last_recognition_timer)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        self.last_recognition_timer = self.frame.after(
            INFO_DISPLAY_DURATION * 1000, 
            self.reset_user_info
        )
    
    def _display_frame(self, frame):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–¥—Ä –∏–∑ BGR –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        pil_image = Image.fromarray(rgb_frame)
        photo = ImageTk.PhotoImage(pil_image)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª–µ–π–±–ª–µ
        self.video_label.config(image=photo, text="")
        self.video_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    def update_user_info(self, user_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user_data[1]
        name = user_data[2]
        photo_path = user_data[3]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        current_time = datetime.datetime.now().strftime('%H:%M:%S')
        self.status_label.config(text=f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –≤ {current_time}", fg="#10B981")
        self.user_id_label.config(text=user_id)
        self.name_label.config(text=name)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if photo_path and os.path.exists(photo_path):
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                pil_image = Image.open(photo_path)
                pil_image = pil_image.resize((170, 170), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(pil_image)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                self.photo_display.config(image=photo, text="")
                self.photo_display.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                self.photo_display.config(image="", text="–û—à–∏–±–∫–∞\n–∑–∞–≥—Ä—É–∑–∫–∏", 
                                        font=("Arial", 9), fg="#EF4444")
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            self.photo_display.config(image="", text="–§–æ—Ç–æ\n–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 
                                    font=("Arial", 9), fg="#6B7280")
    
    def reset_user_info(self):
        """–°–±—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.status_label.config(text="‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...", fg="#6B7280")
        self.user_id_label.config(text="‚Äî")
        self.name_label.config(text="‚Äî")
        self.photo_display.config(image="", text="–ù–µ—Ç —Ñ–æ—Ç–æ", 
                                 font=("Arial", 10), fg="#6B7280")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if self.last_recognition_timer:
            self.last_recognition_timer = None