# gui/recognition_widget.py
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import datetime
import os
import cv2
from config.settings import *

class RecognitionWidget:
    """–í–∏–¥–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü"""
    
    def __init__(self, parent_notebook, camera_manager, face_engine, db):
        self.notebook = parent_notebook
        self.camera_manager = camera_manager
        self.face_engine = face_engine
        self.db = db
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
        self.last_recognition_time = None
        self.last_unknown_time = None
        self.last_recognition_timer = None
        
        # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç –ª–æ–≥–≥–µ—Ä–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.get_audit_logger = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        self.setup_widget()
    
    def set_audit_logger(self, get_audit_func):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç –ª–æ–≥–≥–µ—Ä–∞"""
        self.get_audit_logger = get_audit_func
    
    def setup_widget(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –≤–∫–ª–∞–¥–∫–∏
        self.frame = tk.Frame(self.notebook, bg=THEME_COLOR)
        self.notebook.add(self.frame, text="  üé• –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü  ")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.frame, bg=THEME_COLOR)
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞–º–µ—Ä–∞
        self.create_camera_panel(main_container)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.create_info_panel(main_container)
    
    def create_camera_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∫–∞–º–µ—Ä—ã"""
        left_panel = tk.Frame(parent, bg="white", relief="raised", bd=2, width=500)
        left_panel.pack(side="left", fill="y", padx=(0, 10))
        left_panel.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        video_header = tk.Frame(left_panel, bg="#7C3AED", height=40)
        video_header.pack(fill="x")
        video_header.pack_propagate(False)
        
        video_title = tk.Label(video_header, text="–ö–ê–ú–ï–†–ê", 
                              font=("Arial", 12, "bold"), bg="#7C3AED", fg="white")
        video_title.pack(expand=True)
        
        # –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        video_container = tk.Frame(left_panel, bg="black", width=480, height=360)
        video_container.pack(padx=10, pady=10)
        video_container.pack_propagate(False)
        
        self.video_label = tk.Label(video_container, text="–ö–∞–º–µ—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", 
                                   bg="black", fg="white", font=("Arial", 12))
        self.video_label.pack(fill="both", expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_camera_controls(left_panel)
    
    def create_camera_controls(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π"""
        controls = tk.Frame(parent, bg="white", height=50)
        controls.pack(fill="x", padx=10, pady=(0, 10))
        controls.pack_propagate(False)
        
        self.start_button = tk.Button(controls, text="–ó–∞–ø—É—Å–∫", 
                                     font=("Arial", 10, "bold"), bg="#10B981", fg="white",
                                     relief="flat", padx=15, pady=6, command=self.start_camera)
        self.start_button.pack(side="left", padx=(0, 5))
        
        self.stop_button = tk.Button(controls, text="–°—Ç–æ–ø", 
                                    font=("Arial", 10, "bold"), bg="#EF4444", fg="white",
                                    relief="flat", padx=15, pady=6, command=self.stop_camera,
                                    state="disabled")
        self.stop_button.pack(side="left", padx=(0, 5))
    
    def create_info_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        right_panel = tk.Frame(parent, bg="white", relief="raised", bd=2)
        right_panel.pack(side="right", fill="both", expand=True)
        
        info_content = tk.Frame(right_panel, bg="white")
        info_content.pack(fill="both", expand=True, padx=15, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(info_content, text="–†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨", 
                         font=("Arial", 14, "bold"), bg="white", fg="#374151")
        header.pack(anchor="w", pady=(0, 15))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(info_content, text="‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...", 
                                    font=("Arial", 16, "bold"), bg="white", fg="#6B7280")
        self.status_label.pack(anchor="w", pady=(0, 15))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.create_user_info(info_content)
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
        self.create_photo_display(info_content)
    
    def create_user_info(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        info_container = tk.Frame(parent, bg="#F9FAFB", relief="solid", bd=1)
        info_container.pack(fill="x", pady=(0, 15))
        
        # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        id_frame = tk.Frame(info_container, bg="#F9FAFB")
        id_frame.pack(fill="x", padx=10, pady=8)
        
        tk.Label(id_frame, text="ID:", font=("Arial", 11, "bold"), 
                bg="#F9FAFB", fg="#374151").pack(side="left")
        self.user_id_label = tk.Label(id_frame, text="‚Äî", font=("Arial", 11), 
                                     bg="#F9FAFB", fg="#6B7280")
        self.user_id_label.pack(side="right")
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name_frame = tk.Frame(info_container, bg="#F9FAFB")
        name_frame.pack(fill="x", padx=10, pady=8)
        
        tk.Label(name_frame, text="–ò–º—è:", font=("Arial", 11, "bold"), 
                bg="#F9FAFB", fg="#374151").pack(side="left")
        self.name_label = tk.Label(name_frame, text="‚Äî", font=("Arial", 11), 
                                  bg="#F9FAFB", fg="#6B7280")
        self.name_label.pack(side="right")
    
    def create_photo_display(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        photo_frame = tk.Frame(parent, bg="white")
        photo_frame.pack(fill="x")
        
        tk.Label(photo_frame, text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:", font=("Arial", 11, "bold"), 
                bg="white", fg="#374151").pack(anchor="w", pady=(0, 8))
        
        photo_container = tk.Frame(photo_frame, bg="#F3F4F6", relief="solid", bd=1, 
                                  width=180, height=180)
        photo_container.pack(pady=(0, 10))
        photo_container.pack_propagate(False)
        
        self.photo_display = tk.Label(photo_container, text="–ù–µ—Ç —Ñ–æ—Ç–æ", 
                                     bg="#F3F4F6", font=("Arial", 10), fg="#6B7280")
        self.photo_display.pack(fill="both", expand=True)
    
    def start_camera(self):
        """–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã"""
        if self.camera_manager.start_camera():
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            audit = self.get_audit_logger() if self.get_audit_logger else None
            if audit:
                audit.log_system_event("camera_start", "success")
            
            self.process_frame()
        else:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            audit = self.get_audit_logger() if self.get_audit_logger else None
            if audit:
                audit.log_system_event("camera_start", "failed")
            
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ!")
    
    def stop_camera(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã"""
        self.camera_manager.stop_camera()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
        if self.last_recognition_timer:
            self.frame.after_cancel(self.last_recognition_timer)
            self.last_recognition_timer = None
        
        self.last_recognition_time = None
        self.last_unknown_time = None
        
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
        
        self.video_label.config(image="", text="–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.reset_user_info()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        audit = self.get_audit_logger() if self.get_audit_logger else None
        if audit:
            audit.log_system_event("camera_stop", "success")
    
    def process_frame(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ —Å –∫–∞–º–µ—Ä—ã"""
        if not self.camera_manager.is_camera_running():
            return
        
        frame = self.camera_manager.get_frame()
        if frame is None:
            self.frame.after(30, self.process_frame)
            return
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü
        recognized_faces = self.face_engine.recognize_faces(frame, FRAME_SCALE)
        
        current_time = datetime.datetime.now()
        recognized_user = None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫
        can_recognize_known = self._can_recognize_known(current_time)
        can_recognize_unknown = self._can_recognize_unknown(current_time)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–∏—Ü
        for face_info in recognized_faces:
            name, color = self._process_face(face_info, current_time, 
                                           can_recognize_known, can_recognize_unknown)
            
            # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
            self.face_engine.draw_face_rectangle(frame, face_info, color, name)
            
            # –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if face_info['is_known'] and can_recognize_known:
                user_data = self.db.get_user(face_info['user_id'])
                if user_data:
                    recognized_user = user_data
                    self.last_recognition_time = current_time
                    self._schedule_info_clear()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if recognized_user:
            self.update_user_info(recognized_user)
        elif not recognized_faces and not self.last_recognition_timer:
            self.reset_user_info()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞
        self._display_frame(frame)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
        self.frame.after(30, self.process_frame)
    
    def _can_recognize_known(self, current_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞"""
        if not self.last_recognition_time:
            return True
        
        elapsed = (current_time - self.last_recognition_time).total_seconds()
        return elapsed >= RECOGNITION_DELAY
    
    def _can_recognize_unknown(self, current_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞"""
        if not self.last_unknown_time:
            return True
        
        elapsed = (current_time - self.last_unknown_time).total_seconds()
        return elapsed >= UNKNOWN_FACE_DELAY
    
    def _process_face(self, face_info, current_time, can_recognize_known, can_recognize_unknown):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ"""
        audit = self.get_audit_logger() if self.get_audit_logger else None
        
        if face_info['is_known']:
            if can_recognize_known:
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                if audit:
                    audit.log_recognition(face_info['user_id'], True, face_info['confidence'])
                
                user_data = self.db.get_user(face_info['user_id'])
                name = user_data[2] if user_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π
            else:
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                time_left = RECOGNITION_DELAY - (current_time - self.last_recognition_time).total_seconds()
                name = f"{time_left:.1f}s"
                color = (0, 255, 255)  # –ñ–µ–ª—Ç—ã–π
        else:
            if can_recognize_unknown:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                if audit:
                    audit.log_recognition(None, False, face_info['confidence'])
                
                self.last_unknown_time = current_time
                name = ""
                color = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π
            else:
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
                time_left = UNKNOWN_FACE_DELAY - (current_time - self.last_unknown_time).total_seconds()
                name = f"{time_left:.1f}s"
                color = (0, 255, 255)  # –ñ–µ–ª—Ç—ã–π
        
        return name, color
    
    def _schedule_info_clear(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if self.last_recognition_timer:
            self.frame.after_cancel(self.last_recognition_timer)
        
        self.last_recognition_timer = self.frame.after(
            INFO_DISPLAY_DURATION * 1000, 
            self.reset_user_info
        )
    
    def _display_frame(self, frame):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        pil_image = Image.fromarray(rgb_frame)
        photo = ImageTk.PhotoImage(pil_image)
        
        self.video_label.config(image=photo, text="")
        self.video_label.image = photo
    
    def update_user_info(self, user_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user_id = user_data[1]
        name = user_data[2]
        photo_path = user_data[3]
        
        # –°—Ç–∞—Ç—É—Å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        current_time = datetime.datetime.now().strftime('%H:%M:%S')
        self.status_label.config(text=f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –≤ {current_time}", fg="#10B981")
        self.user_id_label.config(text=user_id)
        self.name_label.config(text=name)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if photo_path and os.path.exists(photo_path):
            try:
                pil_image = Image.open(photo_path)
                pil_image = pil_image.resize((170, 170), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(pil_image)
                
                self.photo_display.config(image=photo, text="")
                self.photo_display.image = photo
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                self.photo_display.config(image="", text="–û—à–∏–±–∫–∞\n–∑–∞–≥—Ä—É–∑–∫–∏", 
                                        font=("Arial", 9), fg="#EF4444")
        else:
            self.photo_display.config(image="", text="–§–æ—Ç–æ\n–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 
                                    font=("Arial", 9), fg="#6B7280")
    
    def reset_user_info(self):
        """–°–±—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        self.status_label.config(text="‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...", fg="#6B7280")
        self.user_id_label.config(text="‚Äî")
        self.name_label.config(text="‚Äî")
        self.photo_display.config(image="", text="–ù–µ—Ç —Ñ–æ—Ç–æ", 
                                 font=("Arial", 10), fg="#6B7280")
        
        if self.last_recognition_timer:
            self.last_recognition_timer = None