# audit/logger.py
"""
Модуль логгера событий безопасности системы
Автор: Студент 4 курса ОмГУ им. Ф.М. Достоевского
ВКР: Автоматизированная система распознавания лиц

Описание:
Логгер событий безопасности является критически важным компонентом
системы информационной безопасности. Обеспечивает всеобъемлющий
аудит всех операций системы распознавания лиц в соответствии с
требованиями ГОСТ по информационной безопасности.

Основные функции:
- Логирование всех попыток биометрической идентификации
- Аудит операций управления пользователями
- Мониторинг системных событий безопасности
- Генерация статистических отчетов
- Экспорт данных для анализа соответствия требованиям

Архитектурные принципы:
- Неизменяемый след аудита
- Атомарные транзакции для обеспечения целостности
- Высокопроизводительное логирование для систем реального времени
- Структурированное логирование для автоматического анализа
- Готовые к соответствию требованиям форматы данных

Соответствие стандартам:
- ГОСТ Р 50739-95 (Средства вычислительной техники)
- ГОСТ Р ИСО/МЭК 15408 (Критерии оценки безопасности ИТ)
- Требования по защите персональных данных (152-ФЗ)
"""

import sqlite3  # Встроенная СУБД для надежного хранения следа аудита
import datetime  # Работа с временными метками в формате ISO
import csv  # Экспорт данных в стандартном формате для анализа
from config.settings import AUDIT_DB


class SecurityAuditLogger:
    """
    Логгер событий безопасности для системы биометрической идентификации
    
    Класс реализует всеобъемлющую систему аудита безопасности для
    системы распознавания лиц в соответствии с требованиями
    информационной безопасности и нормативными документами РФ.
    
    Ключевые возможности:
    - Неизменяемый след аудита всех событий безопасности
    - Высокопроизводительное логирование для операций в режиме реального времени  
    - Структурированное хранение данных для автоматического анализа
    - Статистическая отчетность для мониторинга эффективности
    - Возможности экспорта для интеграции с системами управления информацией и событиями безопасности
    - Отчетность о соответствии для нормативных требований
    
    Архитектурные особенности:
    - Атомарные операции базы данных для обеспечения согласованности
    - Индексированное хранение для быстрого поиска и аналитики
    - Безопасная обработка ошибок для критически важных операций
    - Стандартизированные временные метки в формате ISO 8601
    - Структурированная категоризация событий для классификации
    """
    
    def __init__(self, db_name=AUDIT_DB):
        """
        Инициализация логгера событий безопасности
        
        Создает или подключается к базе данных аудита и инициализирует
        структуру таблиц для хранения событий безопасности.
        
        Аргументы:
            db_name (str): Имя файла базы данных аудита
        """
        self.db_name = db_name  # Путь к файлу базы данных аудита
        self.initialize_audit_database()  # Создание структуры БД при первом запуске
    
    def initialize_audit_database(self):
        """
        Инициализация структуры базы данных аудита безопасности
        
        Создает таблицу security_events для хранения всех событий безопасности
        с соответствующими индексами для оптимизации производительности запросов.
        
        Структура таблицы security_events:
        - id: Уникальный идентификатор события (автоинкремент)
        - timestamp: Временная метка в формате ISO 8601
        - event_type: Тип события безопасности (перечислимые значения)
        - user_id: Идентификатор пользователя (для событий, связанных с пользователями)
        - result: Результат операции (success/failed)
        - distance: Расстояние схожести для биометрических операций (меньше = лучше)
        
        Индексы для производительности:
        - idx_timestamp: Для временных запросов и отчетности
        - idx_event_type: Для фильтрации по типам событий
        - idx_user_id: Для поиска событий конкретного пользователя
        """
        # Установление соединения с базой данных аудита
        connection = sqlite3.connect(self.db_name)
        cursor = connection.cursor()
        
        # Создание основной таблицы событий безопасности
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS security_events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT NOT NULL,
                event_type TEXT NOT NULL,
                user_id TEXT,
                result TEXT NOT NULL,
                distance REAL
            )
        ''')
        
        # Создание индексов для оптимизации производительности
        # Индекс по временным меткам для быстрых временных запросов
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_timestamp ON security_events(timestamp)')
        
        # Индекс по типу события для фильтрации и категоризации
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_event_type ON security_events(event_type)')
        
        # Индекс по ID пользователя для анализа, специфичного для пользователя
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON security_events(user_id)')
        
        # Фиксация изменений в базе данных
        connection.commit()
        connection.close()
    
    def log_face_recognition_attempt(self, user_id=None, success=False, distance=1.0):
        """
        Логирование попытки биометрической идентификации
        
        Записывает все попытки распознавания лиц для анализа эффективности
        системы и обнаружения потенциальных угроз безопасности.
        
        Аргументы:
            user_id (str, необязательно): ID распознанного пользователя (None для неизвестных лиц)
            success (bool): Флаг успешности распознавания
            distance (float): Расстояние схожести биометрического сравнения (0.0-1.0+, меньше = лучше)
        
        Последствия для безопасности:
        - Множественные неудачные попытки могут указывать на атаку
        - Высокие значения расстояния требуют дополнительной проверки (большое расстояние = низкое сходство)
        - Временные шаблоны помогают выявить аномальную активность
        """
        result = "success" if success else "failed"
        self._write_security_event("recognition_attempt", user_id, result, distance)
    
    def log_user_management_action(self, action, user_id, success=True):
        """
        Логирование операций управления пользователями
        
        Записывает все административные операции с пользователями для
        обеспечения подотчетности и соответствия требованиям аудита.
        
        Аргументы:
            action (str): Тип операции ('added', 'deleted', 'photo_updated')
            user_id (str): Идентификатор пользователя
            success (bool): Успешность выполнения операции
        
        Примечания о соответствии требованиям:
        - Все изменения в базе пользователей должны быть задокументированы
        - Неудачные операции могут указывать на проблемы безопасности
        - След аудита требуется для соответствия 152-ФЗ
        """
        result = "success" if success else "failed"
        self._write_security_event(f"user_{action}", user_id, result, None)
    
    def log_system_security_event(self, event_type, result="success"):
        """
        Логирование системных событий безопасности
        
        Записывает критически важные системные события для мониторинга
        состояния и безопасности инфраструктуры.
        
        Аргументы:
            event_type (str): Тип системного события
            result (str): Результат события ('success' или 'failed')
        
        Системные события включают:
        - Запуск/остановка системы и компонентов
        - Подключение/отключение камеры
        - Загрузка биометрических данных
        - Критические ошибки системы
        """
        self._write_security_event(event_type, None, result, None)
    
    def _write_security_event(self, event_type, user_id, result, distance):
        """
        Внутренний метод записи события безопасности в базу данных
        
        Выполняет атомарную операцию записи события с корректной обработкой ошибок
        для обеспечения целостности следа аудита.
        
        Аргументы:
            event_type (str): Тип события безопасности
            user_id (str или None): Идентификатор пользователя
            result (str): Результат операции
            distance (float или None): Расстояние схожести (для биометрических операций)
        
        Обработка ошибок:
        - Все ошибки записи логируются в консоль для устранения неполадок
        - Критически важные события не должны теряться
        - Проблемы с подключением к базе данных обрабатываются корректно
        """
        try:
            # Установление соединения с базой данных аудита
            connection = sqlite3.connect(self.db_name)
            cursor = connection.cursor()
            
            # Генерация временной метки в формате ISO 8601 для стандартизации
            timestamp = datetime.datetime.now().isoformat()
            
            # Атомарная операция записи события
            cursor.execute('''
                INSERT INTO security_events (timestamp, event_type, user_id, result, distance)
                VALUES (?, ?, ?, ?, ?)
            ''', (timestamp, event_type, user_id, result, distance))
            
            # Фиксация транзакции
            connection.commit()
            connection.close()
            
        except Exception as e:
            # Обработка ошибок с логированием для устранения неполадок
            print(f"КРИТИЧЕСКАЯ ОШИБКА: Не удалось записать событие безопасности: {e}")
            print(f"Событие: {event_type}, Пользователь: {user_id}, Результат: {result}")
    
    def generate_security_statistics(self, days=7):
        """
        Генерация статистических данных безопасности
        
        Создает всеобъемлющий отчет по активности системы безопасности
        за указанный период для анализа эффективности и выявления аномалий.
        
        Аргументы:
            days (int): Количество дней для анализа (по умолчанию 7)
        
        Возвращает:
            dict или None: Словарь со статистическими данными:
                {
                    'general_stats': [(event_type, result, count, avg_distance), ...],
                    'recent_events': [(timestamp, event_type, user_id, result, distance), ...]
                }
                или None при ошибке
        
        Статистические показатели включают:
        - Общую статистику по типам событий и результатам
        - Средние расстояния схожести для биометрических операций
        - Последние события для мониторинга в режиме реального времени
        - Временные шаблоны для анализа аномалий
        """
        try:
            connection = sqlite3.connect(self.db_name)
            cursor = connection.cursor()
            
            # Вычисление временной границы для анализа
            start_date = datetime.datetime.now() - datetime.timedelta(days=days)
            
            # Запрос общей статистики с группировкой по типам событий и результатам
            cursor.execute('''
                SELECT event_type, result, COUNT(*), AVG(distance)
                FROM security_events 
                WHERE timestamp >= ?
                GROUP BY event_type, result
                ORDER BY COUNT(*) DESC
            ''', (start_date.isoformat(),))
            
            general_stats = cursor.fetchall()
            
            # Запрос последних событий для мониторинга в режиме реального времени
            cursor.execute('''
                SELECT timestamp, event_type, user_id, result, distance
                FROM security_events 
                WHERE timestamp >= ?
                ORDER BY timestamp DESC
                LIMIT 50
            ''', (start_date.isoformat(),))
            
            recent_events = cursor.fetchall()
            
            connection.close()
            
            # Возврат структурированных статистических данных
            return {
                'general_stats': general_stats,
                'recent_events': recent_events
            }
            
        except Exception as e:
            print(f"Ошибка генерации статистики безопасности: {e}")
            return None
    
    def export_security_report(self, file_path, days=7):
        """
        Экспорт отчета безопасности в формат CSV
        
        Создает готовый к соответствию требованиям отчет всех событий безопасности за
        указанный период в стандартном формате CSV для интеграции
        с внешними системами анализа и решениями управления информацией и событиями безопасности.
        
        Аргументы:
            file_path (str): Путь для сохранения файла CSV
            days (int): Количество дней для включения в отчет
        
        Возвращает:
            bool: True при успешном экспорте, False при ошибке
        
        Формат экспорта:
        - CSV с разделителем ';' для совместимости с Excel
        - Кодировка UTF-8-BOM для корректного отображения кириллицы
        - Локализованные заголовки колонок
        - Форматированные временные метки
        - Переведенные типы событий и результаты
        
        Функции соответствия требованиям:
        - Структурированный формат для автоматического анализа
        - Точность временных меток для криминалистического анализа
        - Полный след аудита для нормативных требований
        """
        try:
            connection = sqlite3.connect(self.db_name)
            cursor = connection.cursor()
            
            # Определение временной границы для экспорта
            start_date = datetime.datetime.now() - datetime.timedelta(days=days)
            
            # Запрос всех событий за указанный период
            cursor.execute('''
                SELECT timestamp, event_type, user_id, result, distance
                FROM security_events 
                WHERE timestamp >= ?
                ORDER BY timestamp DESC
            ''', (start_date.isoformat(),))
            
            events = cursor.fetchall()
            connection.close()
            
            # Словарь локализации для отчетности о соответствии требованиям
            event_types_localization = {
                'recognition_attempt': 'Попытка распознавания',
                'user_added': 'Добавление пользователя',
                'user_deleted': 'Удаление пользователя',
                'user_photo_updated': 'Обновление фото',
                'system_start': 'Запуск системы распознавания',
                'camera_start': 'Запуск камеры',
                'camera_stop': 'Остановка камеры',
                'encodings_loaded': 'Загрузка кодировок',
                'system_shutdown': 'Завершение работы системы распознавания'
            }
            
            # Создание файла CSV с корректной кодировкой для кириллицы
            with open(file_path, 'w', newline='', encoding='utf-8-sig') as csvfile:
                writer = csv.writer(csvfile, delimiter=';')
                
                # Заголовки колонок на русском языке для отчетности
                writer.writerow(['Время', 'Тип события', 'ID пользователя', 'Результат', 'Схожесть'])
                
                # Запись всех событий с локализацией и форматированием
                for event in events:
                    # Форматирование временной метки в читаемый формат
                    timestamp = datetime.datetime.fromisoformat(event[0])
                    formatted_time = timestamp.strftime('%Y-%m-%d %H:%M:%S')
                    
                    # Локализация типа события
                    event_type_ru = event_types_localization.get(event[1], event[1])
                    
                    # Форматирование результата
                    result_ru = 'Успех' if event[3] == 'success' else 'Неудача'
                    
                    # Форматирование расстояния схожести
                    distance_str = f"{event[4]:.3f}" if event[4] is not None else 'Н/Д'
                    
                    # Запись строки в CSV
                    writer.writerow([
                        formatted_time,
                        event_type_ru,
                        event[2] or 'Н/Д',  # user_id или 'Н/Д' если None
                        result_ru,
                        distance_str
                    ])
            
            return True
            
        except Exception as e:
            print(f"Ошибка экспорта отчета безопасности: {e}")
            return False