# audit_system.py
import sqlite3
import datetime
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from collections import defaultdict
import csv
import os
import cv2
import face_recognition
import shutil
import numpy as np
from PIL import Image, ImageTk

class AuditLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, db_name="audit.db"):
        self.db_name = db_name
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS security_events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT NOT NULL,
                event_type TEXT NOT NULL,
                user_id TEXT,
                result TEXT NOT NULL,
                confidence REAL
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_timestamp ON security_events(timestamp)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_event_type ON security_events(event_type)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON security_events(user_id)')
        
        conn.commit()
        conn.close()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞
        self._log_event("system_audit", None, "started", None)
    
    def log_recognition(self, user_id=None, success=False, confidence=0.0):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        result = "success" if success else "failed"
        self._log_event("recognition_attempt", user_id, result, confidence)
    
    def log_user_action(self, action, user_id, success=True):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        result = "success" if success else "failed"
        self._log_event(f"user_{action}", user_id, result, None)
    
    def log_system_event(self, event_type, result="success"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        self._log_event(event_type, None, result, None)
    
    def _log_event(self, event_type, user_id, result, confidence):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            timestamp = datetime.datetime.now().isoformat()
            
            cursor.execute('''
                INSERT INTO security_events (timestamp, event_type, user_id, result, confidence)
                VALUES (?, ?, ?, ?, ?)
            ''', (timestamp, event_type, user_id, result, confidence))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∞—É–¥–∏—Ç: {e}")
    
    def get_statistics(self, days=7):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
            start_date = datetime.datetime.now() - datetime.timedelta(days=days)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('''
                SELECT event_type, result, COUNT(*), AVG(confidence)
                FROM security_events 
                WHERE timestamp >= ?
                GROUP BY event_type, result
            ''', (start_date.isoformat(),))
            
            stats = cursor.fetchall()
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
            cursor.execute('''
                SELECT strftime('%Y-%m-%d %H:00:00', timestamp) as hour,
                       COUNT(*) as count
                FROM security_events 
                WHERE timestamp >= ? AND event_type = 'recognition_attempt'
                GROUP BY hour
                ORDER BY hour
            ''', (start_date.isoformat(),))
            
            hourly_stats = cursor.fetchall()
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                SELECT user_id, COUNT(*) as attempts,
                       SUM(CASE WHEN result = 'success' THEN 1 ELSE 0 END) as successes
                FROM security_events 
                WHERE timestamp >= ? AND event_type = 'recognition_attempt' AND user_id IS NOT NULL
                GROUP BY user_id
                ORDER BY attempts DESC
                LIMIT 5
            ''', (start_date.isoformat(),))
            
            top_users = cursor.fetchall()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            cursor.execute('''
                SELECT timestamp, event_type, user_id, result, confidence
                FROM security_events 
                WHERE timestamp >= ?
                ORDER BY timestamp DESC
                LIMIT 50
            ''', (start_date.isoformat(),))
            
            recent_events = cursor.fetchall()
            
            conn.close()
            
            return {
                'general_stats': stats,
                'hourly_stats': hourly_stats,
                'top_users': top_users,
                'recent_events': recent_events
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def export_to_csv(self, file_path, days=7):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞ –≤ CSV"""
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            
            start_date = datetime.datetime.now() - datetime.timedelta(days=days)
            
            cursor.execute('''
                SELECT timestamp, event_type, user_id, result, confidence
                FROM security_events 
                WHERE timestamp >= ?
                ORDER BY timestamp DESC
            ''', (start_date.isoformat(),))
            
            events = cursor.fetchall()
            conn.close()
            
            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['–í—Ä–µ–º—è', '–¢–∏–ø —Å–æ–±—ã—Ç–∏—è', 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–†–µ–∑—É–ª—å—Ç–∞—Ç', '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å'])
                
                for event in events:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    timestamp = datetime.datetime.fromisoformat(event[0])
                    formatted_time = timestamp.strftime('%Y-%m-%d %H:%M:%S')
                    
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
                    event_types = {
                        'recognition_attempt': '–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è',
                        'user_added': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                        'user_deleted': '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                        'user_photo_updated': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ',
                        'system_start': '–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã',
                        'camera_start': '–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã',
                        'camera_stop': '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã',
                        'encodings_loaded': '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫',
                        'system_error': '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
                        'system_audit': '–ê—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã',
                        'audit_integrated': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞—É–¥–∏—Ç–∞'
                    }
                    
                    event_type_ru = event_types.get(event[1], event[1])
                    result_ru = '–£—Å–ø–µ—Ö' if event[3] == 'success' else '–ù–µ—É–¥–∞—á–∞'
                    
                    writer.writerow([
                        formatted_time,
                        event_type_ru,
                        event[2] or '–ù/–î',
                        result_ru,
                        f"{event[4]:.3f}" if event[4] is not None else '–ù/–î'
                    ])
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")
            return False

class AuditTab:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –∞—É–¥–∏—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    
    def __init__(self, parent_notebook, audit_logger):
        self.notebook = parent_notebook
        self.audit = audit_logger
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        self.audit_frame = tk.Frame(self.notebook, bg="#6B46C1")
        self.notebook.add(self.audit_frame, text="  üìã –ñ—É—Ä–Ω–∞–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏  ")
        
        self.setup_audit_ui()
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self.auto_refresh()
    
    def setup_audit_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏ –∞—É–¥–∏—Ç–∞"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.audit_frame, bg="#6B46C1")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        stats_container = tk.Frame(main_container, bg="white", relief="raised", bd=2)
        stats_container.pack(fill="x", pady=(0, 15))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_header = tk.Frame(stats_container, bg="#7C3AED", height=40)
        stats_header.pack(fill="x")
        stats_header.pack_propagate(False)
        
        stats_title = tk.Label(stats_header, text="–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò", 
                             font=("Arial", 12, "bold"), bg="#7C3AED", fg="white")
        stats_title.pack(expand=True)
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        stats_content = tk.Frame(stats_container, bg="white")
        stats_content.pack(fill="x", padx=15, pady=15)
        
        # –°–æ–∑–¥–∞–µ–º 4 –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        stats_row = tk.Frame(stats_content, bg="white")
        stats_row.pack(fill="x")
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        card1 = tk.Frame(stats_row, bg="#F8FAFC", relief="solid", bd=1)
        card1.pack(side="left", fill="both", expand=True, padx=(0, 5))
        
        tk.Label(card1, text="–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è:", font=("Arial", 9), 
                bg="#F8FAFC", fg="#6B7280").pack(anchor="w", padx=10, pady=(8, 2))
        self.total_attempts_label = tk.Label(card1, text="0", font=("Arial", 14, "bold"), 
                                           bg="#F8FAFC", fg="#3B82F6")
        self.total_attempts_label.pack(anchor="w", padx=10, pady=(0, 8))
        
        card2 = tk.Frame(stats_row, bg="#F8FAFC", relief="solid", bd=1)
        card2.pack(side="left", fill="both", expand=True, padx=(5, 5))
        
        tk.Label(card2, text="–£—Å–ø–µ—à–Ω—ã—Ö:", font=("Arial", 9), 
                bg="#F8FAFC", fg="#6B7280").pack(anchor="w", padx=10, pady=(8, 2))
        self.successful_label = tk.Label(card2, text="0", font=("Arial", 14, "bold"), 
                                       bg="#F8FAFC", fg="#10B981")
        self.successful_label.pack(anchor="w", padx=10, pady=(0, 8))
        
        card3 = tk.Frame(stats_row, bg="#F8FAFC", relief="solid", bd=1)
        card3.pack(side="left", fill="both", expand=True, padx=(5, 5))
        
        tk.Label(card3, text="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:", font=("Arial", 9), 
                bg="#F8FAFC", fg="#6B7280").pack(anchor="w", padx=10, pady=(8, 2))
        self.success_rate_label = tk.Label(card3, text="0%", font=("Arial", 14, "bold"), 
                                         bg="#F8FAFC", fg="#F59E0B")
        self.success_rate_label.pack(anchor="w", padx=10, pady=(0, 8))
        
        card4 = tk.Frame(stats_row, bg="#F8FAFC", relief="solid", bd=1)
        card4.pack(side="left", fill="both", expand=True, padx=(5, 0))
        
        tk.Label(card4, text="–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", font=("Arial", 9), 
                bg="#F8FAFC", fg="#6B7280").pack(anchor="w", padx=10, pady=(8, 2))
        self.last_activity_label = tk.Label(card4, text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", font=("Arial", 14, "bold"), 
                                          bg="#F8FAFC", fg="#6B7280")
        self.last_activity_label.pack(anchor="w", padx=10, pady=(0, 8))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å - –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π (–∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ)
        log_container = tk.Frame(main_container, bg="white", relief="raised", bd=2)
        log_container.pack(fill="both", expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–∞
        log_header = tk.Frame(log_container, bg="#7C3AED", height=40)
        log_header.pack(fill="x")
        log_header.pack_propagate(False)
        
        log_title = tk.Label(log_header, text="–ñ–£–†–ù–ê–õ –°–û–ë–´–¢–ò–ô", 
                           font=("Arial", 12, "bold"), bg="#7C3AED", fg="white")
        log_title.pack(side="left", expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞
        export_btn = tk.Button(log_header, text="üì• –≠–∫—Å–ø–æ—Ä—Ç CSV", 
                             font=("Arial", 10, "bold"), bg="#10B981", fg="white",
                             relief="flat", padx=15, pady=6, command=self.export_csv)
        export_btn.pack(side="right", padx=(5, 15))
        
        refresh_btn = tk.Button(log_header, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                              font=("Arial", 10, "bold"), bg="#6366F1", fg="white",
                              relief="flat", padx=15, pady=6, command=self.refresh_data)
        refresh_btn.pack(side="right", padx=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
        log_content = tk.Frame(log_container, bg="white")
        log_content.pack(fill="both", expand=True, padx=10, pady=10)
        
        columns = ("–í—Ä–µ–º—è", "–¢–∏–ø —Å–æ–±—ã—Ç–∏—è", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        self.events_tree = ttk.Treeview(log_content, columns=columns, show="headings")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.events_tree.heading("–í—Ä–µ–º—è", text="–í—Ä–µ–º—è")
        self.events_tree.heading("–¢–∏–ø —Å–æ–±—ã—Ç–∏—è", text="–¢–∏–ø —Å–æ–±—ã—Ç–∏—è")
        self.events_tree.heading("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        self.events_tree.heading("–†–µ–∑—É–ª—å—Ç–∞—Ç", text="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        self.events_tree.heading("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", text="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
        
        self.events_tree.column("–í—Ä–µ–º—è", width=120)
        self.events_tree.column("–¢–∏–ø —Å–æ–±—ã—Ç–∏—è", width=180)
        self.events_tree.column("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", width=120)
        self.events_tree.column("–†–µ–∑—É–ª—å—Ç–∞—Ç", width=100)
        self.events_tree.column("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", width=100)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar_events = ttk.Scrollbar(log_content, orient="vertical", command=self.events_tree.yview)
        self.events_tree.configure(yscrollcommand=scrollbar_events.set)
        
        self.events_tree.pack(side="left", fill="both", expand=True)
        scrollbar_events.pack(side="right", fill="y")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∫
        self.events_tree.tag_configure("success", background="#F0FDF4")
        self.events_tree.tag_configure("failed", background="#FEF2F2")
        self.events_tree.tag_configure("system", background="#F8FAFC")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.refresh_data()
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∫–ª–∞–¥–∫–µ"""
        try:
            stats = self.audit.get_statistics(days=1)  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            if stats:
                self.update_statistics(stats)
                self.update_events_table(stats)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞: {e}")
    
    def update_statistics(self, stats):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        total_attempts = 0
        successful = 0
        
        for stat in stats['general_stats']:
            event_type, result, count, avg_confidence = stat
            if event_type == 'recognition_attempt':
                total_attempts += count
                if result == 'success':
                    successful += count
        
        success_rate = (successful / total_attempts * 100) if total_attempts > 0 else 0
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        last_activity = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if stats['recent_events']:
            last_timestamp = stats['recent_events'][0][0]
            last_time = datetime.datetime.fromisoformat(last_timestamp)
            last_activity = last_time.strftime('%H:%M:%S')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª—ã
        self.total_attempts_label.config(text=str(total_attempts))
        self.successful_label.config(text=str(successful))
        self.success_rate_label.config(text=f"{success_rate:.1f}%")
        self.last_activity_label.config(text=last_activity)
    
    def update_events_table(self, stats):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.events_tree.get_children():
            self.events_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        for event in stats['recent_events']:
            timestamp = datetime.datetime.fromisoformat(event[0])
            formatted_time = timestamp.strftime('%H:%M:%S')
            
            # üÜï –†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–õ–û–í–ê–†–¨ –ü–ï–†–ï–í–û–î–û–í –î–õ–Ø –ù–û–í–´–• –°–û–ë–´–¢–ò–ô
            event_types = {
                'recognition_attempt': '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ',
                'user_added': '‚ûï –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                'user_deleted': 'üóë –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                'user_photo_updated': 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ',
                'system_start': '–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã',
                'camera_start': '–ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã',
                'camera_stop': '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã',
                'system_audit': '–ê—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã',
                'encodings_loaded': '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫',
                'system_error': '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
                'audit_integrated': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞—É–¥–∏—Ç–∞'
            }
            
            event_type = event_types.get(event[1], event[1])
            user_id = event[2] if event[2] else "‚Äî"
            result = "‚úÖ –£—Å–ø–µ—Ö" if event[3] == 'success' else "‚ùå –ù–µ—É–¥–∞—á–∞"
            confidence = f"{event[4]:.3f}" if event[4] is not None else "‚Äî"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –¥–ª—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
            tag = ""
            if event[1] == 'recognition_attempt':
                tag = "success" if event[3] == 'success' else "failed"
            elif event[1] in ['user_added', 'user_deleted', 'user_photo_updated']:
                # üÜï –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                tag = "success" if event[3] == 'success' else "failed"
            else:
                tag = "system"
            
            self.events_tree.insert("", "end", 
                                  values=(formatted_time, event_type, user_id, result, confidence),
                                  tags=(tag,))
    
    def export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∞—É–¥–∏—Ç–∞",
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv")]
        )
        
        if file_path:
            if self.audit.export_to_csv(file_path, days=7):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤:\n{file_path}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç!")
    
    def auto_refresh(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥"""
        self.refresh_data()
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        self.audit_frame.after(5000, self.auto_refresh)

# –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
class AuditIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    
    @staticmethod
    def integrate_with_app(app_instance):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –∞—É–¥–∏—Ç–∞
        app_instance.audit = AuditLogger()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        app_instance.last_recognition_time = None
        app_instance.last_recognition_timer = None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        app_instance.audit_tab = AuditTab(app_instance.notebook, app_instance.audit)
        
        # üÜï –ë–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥!
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        app_instance.audit.log_system_event("audit_integrated")
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        print("üìä –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–µ–ø–µ—Ä—å –ª–æ–≥–∏—Ä—É—é—Ç—Å—è:")
        print("   ‚úÖ –ü–æ–ø—ã—Ç–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π") 
        print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")
        return app_instance

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –¥–æ–±–∞–≤–∏—Ç—å –≤ main.py:
"""
if __name__ == "__main__":
    import tkinter as tk
    from modern_face_recognition import ModernFaceRecognitionApp
    from audit_system import AuditIntegration
    
    root = tk.Tk()
    app = ModernFaceRecognitionApp(root)
    
    # üÜï –ò–ù–¢–ï–ì–†–ò–†–£–ï–ú –°–ò–°–¢–ï–ú–£ –ê–£–î–ò–¢–ê
    app = AuditIntegration.integrate_with_app(app)
    
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()
"""
        