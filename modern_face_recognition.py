import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import cv2
import face_recognition
import os
import shutil
import numpy as np
from PIL import Image, ImageTk
from database import DatabaseManager

class ModernFaceRecognitionApp:
    def __init__(self, root):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü")
        self.root.geometry("1200x800")
        self.root.configure(bg="#6B46C1")  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseManager()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π
        self.cap = None
        self.is_running = False
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.known_encodings = []
        self.known_user_ids = []
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.photo_path = ""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists("photos"):
            os.makedirs("photos")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫ –ª–∏—Ü
        self.load_encodings()
        
        self.setup_modern_ui()
    
    def setup_modern_ui(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(self.root, bg="#6B46C1", height=80)
        header_frame.pack(fill="x", padx=20, pady=(20, 0))
        header_frame.pack_propagate(False)
        
        # –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        title_frame = tk.Frame(header_frame, bg="#6B46C1")
        title_frame.pack(side="left", fill="y")
        
        # –ò–∫–æ–Ω–∫–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é)
        icon_label = tk.Label(title_frame, text="üë§", font=("Arial", 24), bg="#6B46C1", fg="white")
        icon_label.pack(side="left", padx=(0, 10))
        
        title_label = tk.Label(title_frame, text="FACE RECOGNITION SYSTEM", 
                              font=("Arial", 18, "bold"), bg="#6B46C1", fg="white")
        title_label.pack(side="left")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg="#6B46C1")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –í–∏–¥–µ–æ
        left_panel = tk.Frame(main_container, bg="white", relief="raised", bd=2)
        left_panel.pack(side="left", fill="both", expand=True, padx=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ –ø–∞–Ω–µ–ª–∏
        video_header = tk.Frame(left_panel, bg="#7C3AED", height=50)
        video_header.pack(fill="x")
        video_header.pack_propagate(False)
        
        video_title = tk.Label(video_header, text="LIVE CAMERA", 
                              font=("Arial", 14, "bold"), bg="#7C3AED", fg="white")
        video_title.pack(expand=True)
        
        # –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        video_container = tk.Frame(left_panel, bg="black")
        video_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ
        self.video_label = tk.Label(video_container, text="–ö–∞–º–µ—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞", 
                                   bg="black", fg="white", font=("Arial", 14))
        self.video_label.pack(fill="both", expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π
        camera_controls = tk.Frame(left_panel, bg="white", height=60)
        camera_controls.pack(fill="x", padx=10, pady=(0, 10))
        camera_controls.pack_propagate(False)
        
        self.start_button = tk.Button(camera_controls, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É", 
                                     font=("Arial", 11, "bold"), bg="#10B981", fg="white",
                                     relief="flat", padx=20, pady=8, command=self.start_camera)
        self.start_button.pack(side="left", padx=(0, 10))
        
        self.stop_button = tk.Button(camera_controls, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–µ—Ä—É", 
                                    font=("Arial", 11, "bold"), bg="#EF4444", fg="white",
                                    relief="flat", padx=20, pady=8, command=self.stop_camera,
                                    state="disabled")
        self.stop_button.pack(side="left")
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        right_panel = tk.Frame(main_container, bg="white", relief="raised", bd=2, width=400)
        right_panel.pack(side="right", fill="y")
        right_panel.pack_propagate(False)
        
        # === –°–ï–ö–¶–ò–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø ===
        recognition_frame = tk.Frame(right_panel, bg="white")
        recognition_frame.pack(fill="x", padx=15, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        rec_header = tk.Label(recognition_frame, text="–†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨", 
                             font=("Arial", 12, "bold"), bg="white", fg="#374151")
        rec_header.pack(anchor="w", pady=(0, 10))
        
        # –°—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.status_label = tk.Label(recognition_frame, text="–û–∂–∏–¥–∞–Ω–∏–µ...", 
                                    font=("Arial", 14, "bold"), bg="white", fg="#6B7280")
        self.status_label.pack(anchor="w", pady=(0, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        info_container = tk.Frame(recognition_frame, bg="#F9FAFB", relief="solid", bd=1)
        info_container.pack(fill="x", pady=(0, 10))
        
        # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        id_frame = tk.Frame(info_container, bg="#F9FAFB")
        id_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(id_frame, text="ID:", font=("Arial", 10, "bold"), bg="#F9FAFB", fg="#374151").pack(side="left")
        self.user_id_label = tk.Label(id_frame, text="‚Äî", font=("Arial", 10), bg="#F9FAFB", fg="#6B7280")
        self.user_id_label.pack(side="right")
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name_frame = tk.Frame(info_container, bg="#F9FAFB")
        name_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(name_frame, text="–ò–º—è:", font=("Arial", 10, "bold"), bg="#F9FAFB", fg="#374151").pack(side="left")
        self.name_label = tk.Label(name_frame, text="‚Äî", font=("Arial", 10), bg="#F9FAFB", fg="#6B7280")
        self.name_label.pack(side="right")
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        photo_frame = tk.Frame(recognition_frame, bg="white")
        photo_frame.pack(fill="x", pady=(0, 10))
        
        tk.Label(photo_frame, text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:", font=("Arial", 10, "bold"), 
                bg="white", fg="#374151").pack(anchor="w")
        
        self.photo_display = tk.Label(photo_frame, text="–ù–µ—Ç —Ñ–æ—Ç–æ", bg="#F3F4F6", 
                                     width=20, height=8, relief="solid", bd=1)
        self.photo_display.pack(pady=5)
        
        # === –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨ ===
        separator = tk.Frame(right_panel, bg="#E5E7EB", height=2)
        separator.pack(fill="x", padx=15, pady=10)
        
        # === –°–ï–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        add_user_frame = tk.Frame(right_panel, bg="white")
        add_user_frame.pack(fill="x", padx=15, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_header = tk.Label(add_user_frame, text="–î–û–ë–ê–í–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø", 
                             font=("Arial", 12, "bold"), bg="white", fg="#374151")
        add_header.pack(anchor="w", pady=(0, 15))
        
        # –ü–æ–ª–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        id_input_frame = tk.Frame(add_user_frame, bg="white")
        id_input_frame.pack(fill="x", pady=(0, 10))
        
        tk.Label(id_input_frame, text="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", font=("Arial", 10, "bold"), 
                bg="white", fg="#374151").pack(anchor="w")
        self.user_id_entry = tk.Entry(id_input_frame, font=("Arial", 11), relief="solid", bd=1)
        self.user_id_entry.pack(fill="x", pady=(5, 0))
        
        # –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name_input_frame = tk.Frame(add_user_frame, bg="white")
        name_input_frame.pack(fill="x", pady=(0, 10))
        
        tk.Label(name_input_frame, text="–ò–º—è:", font=("Arial", 10, "bold"), 
                bg="white", fg="#374151").pack(anchor="w")
        self.name_entry = tk.Entry(name_input_frame, font=("Arial", 11), relief="solid", bd=1)
        self.name_entry.pack(fill="x", pady=(5, 0))
        
        # –í—ã–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo_input_frame = tk.Frame(add_user_frame, bg="white")
        photo_input_frame.pack(fill="x", pady=(0, 10))
        
        tk.Label(photo_input_frame, text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è:", font=("Arial", 10, "bold"), 
                bg="white", fg="#374151").pack(anchor="w")
        
        photo_select_frame = tk.Frame(photo_input_frame, bg="white")
        photo_select_frame.pack(fill="x", pady=(5, 0))
        
        select_photo_btn = tk.Button(photo_select_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ", 
                                    font=("Arial", 10), bg="#6366F1", fg="white",
                                    relief="flat", padx=15, pady=5, command=self.select_photo)
        select_photo_btn.pack(side="left")
        
        self.photo_status_label = tk.Label(photo_select_frame, text="–§–æ—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", 
                                          font=("Arial", 9), bg="white", fg="#6B7280")
        self.photo_status_label.pack(side="left", padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = tk.Frame(add_user_frame, bg="white")
        actions_frame.pack(fill="x", pady=(15, 0))
        
        add_btn = tk.Button(actions_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                           font=("Arial", 11, "bold"), bg="#10B981", fg="white",
                           relief="flat", padx=20, pady=8, command=self.add_user)
        add_btn.pack(fill="x", pady=(0, 5))
        
        refresh_btn = tk.Button(actions_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫–∏", 
                               font=("Arial", 10), bg="#6366F1", fg="white",
                               relief="flat", padx=20, pady=6, command=self.load_encodings)
        refresh_btn.pack(fill="x")
        
        # === –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
        users_frame = tk.Frame(right_panel, bg="white")
        users_frame.pack(fill="both", expand=True, padx=15, pady=(0, 15))
        
        users_header = tk.Label(users_frame, text="–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô", 
                               font=("Arial", 12, "bold"), bg="white", fg="#374151")
        users_header.pack(anchor="w", pady=(0, 10))
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        columns = ("ID", "–ò–º—è")
        self.users_tree = ttk.Treeview(users_frame, columns=columns, show="headings", height=6)
        
        for col in columns:
            self.users_tree.heading(col, text=col)
            self.users_tree.column(col, width=120)
        
        scrollbar = ttk.Scrollbar(users_frame, orient="vertical", command=self.users_tree.yview)
        self.users_tree.configure(yscrollcommand=scrollbar.set)
        
        self.users_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = tk.Button(users_frame, text="üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ", 
                              font=("Arial", 10), bg="#EF4444", fg="white",
                              relief="flat", padx=15, pady=5, command=self.delete_user)
        delete_btn.pack(pady=(10, 0))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.refresh_user_list()
    
    def load_encodings(self):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫ –ª–∏—Ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            self.known_encodings, self.known_user_ids = self.db.get_all_encodings()
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–¥–∏—Ä–æ–≤–æ–∫ –∏–∑ –ë–î: {len(self.known_encodings)}")
            
            if not self.known_encodings:
                print("–ö–æ–¥–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–æ–∫: {e}")
            self.known_encodings = []
            self.known_user_ids = []
    
    def start_camera(self):
        # –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã
        try:
            self.cap = cv2.VideoCapture(0)
            if not self.cap.isOpened():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ!")
                return
            
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            
            self.is_running = True
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")
            
            self.process_frame()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã: {str(e)}")
    
    def stop_camera(self):
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã
        self.is_running = False
        if self.cap:
            self.cap.release()
        
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
        
        self.video_label.config(image="", text="–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.reset_user_info()
    
    def process_frame(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã
        if not self.is_running or not self.cap:
            return
        
        ret, frame = self.cap.read()
        if not ret:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã")
            self.root.after(30, self.process_frame)
            return
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
        
        # –ü–æ–∏—Å–∫ –ª–∏—Ü –Ω–∞ –∫–∞–¥—Ä–µ
        face_locations = face_recognition.face_locations(rgb_small_frame)
        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)
        
        recognized_user = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–∏—Ü
        for face_encoding, face_location in zip(face_encodings, face_locations):
            if self.known_encodings:
                matches = face_recognition.compare_faces(self.known_encodings, face_encoding)
                face_distances = face_recognition.face_distance(self.known_encodings, face_encoding)
                
                best_match_index = np.argmin(face_distances)
                
                if matches[best_match_index]:
                    user_id = self.known_user_ids[best_match_index]
                    user_data = self.db.get_user(user_id)
                    if user_data:
                        recognized_user = user_data
                        name = user_data[2]
                    else:
                        name = "–û—à–∏–±–∫–∞ –ë–î"
                else:
                    name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            else:
                name = "–ù–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–æ–∫"
            
            # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞
            top, right, bottom, left = face_location
            top *= 4
            right *= 4
            bottom *= 4
            left *= 4
            
            color = (0, 255, 0) if recognized_user else (0, 0, 255)
            
            cv2.rectangle(frame, (left, top), (right, bottom), color, 2)
            cv2.rectangle(frame, (left, bottom - 35), (right, bottom), color, cv2.FILLED)
            cv2.putText(frame, name, (left + 6, bottom - 6), cv2.FONT_HERSHEY_DUPLEX, 0.6, (255, 255, 255), 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if recognized_user:
            self.update_user_info(recognized_user)
        elif not face_locations:
            self.reset_user_info()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–¥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Tkinter
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        pil_image = Image.fromarray(rgb_frame)
        photo = ImageTk.PhotoImage(pil_image)
        
        self.video_label.config(image=photo, text="")
        self.video_label.image = photo
        
        self.root.after(30, self.process_frame)
    
    def update_user_info(self, user_data):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = user_data[1]
        name = user_data[2]
        photo_path = user_data[3]
        
        self.status_label.config(text="‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω", fg="#10B981")
        self.user_id_label.config(text=user_id)
        self.name_label.config(text=name)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        if photo_path and os.path.exists(photo_path):
            try:
                pil_image = Image.open(photo_path)
                pil_image = pil_image.resize((120, 120), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(pil_image)
                
                self.photo_display.config(image=photo, text="")
                self.photo_display.image = photo
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
                self.photo_display.config(image="", text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        else:
            self.photo_display.config(image="", text="–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def reset_user_info(self):
        # –°–±—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.status_label.config(text="‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...", fg="#6B7280")
        self.user_id_label.config(text="‚Äî")
        self.name_label.config(text="‚Äî")
        self.photo_display.config(image="", text="–ù–µ—Ç —Ñ–æ—Ç–æ")
    
    def select_photo(self):
        # –í—ã–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
            filetypes=[("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp")]
        )
        
        if file_path:
            self.photo_path = file_path
            self.photo_status_label.config(text=f"‚úì {os.path.basename(file_path)}", fg="#10B981")
    
    def add_user(self):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = self.user_id_entry.get().strip()
        name = self.name_entry.get().strip()
        
        if not user_id or not name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return
        
        if not self.photo_path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
            return
        
        photo_filename = f"{user_id}.jpg"
        photo_destination = os.path.join("photos", photo_filename)
        
        try:
            shutil.copy2(self.photo_path, photo_destination)
            face_encoding = self.create_face_encoding(photo_destination)
            
            if self.db.add_user(user_id, name, photo_destination, face_encoding):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
                self.user_id_entry.delete(0, tk.END)
                self.name_entry.delete(0, tk.END)
                self.photo_path = ""
                self.photo_status_label.config(text="–§–æ—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", fg="#6B7280")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.refresh_user_list()
                self.load_encodings()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                if os.path.exists(photo_destination):
                    os.remove(photo_destination)
                    
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    
    def create_face_encoding(self, photo_path):
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ª–∏—Ü–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        try:
            image = cv2.imread(photo_path)
            if image is None:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
            rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            face_encodings = face_recognition.face_encodings(rgb_image)
            
            if face_encodings:
                print(f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {os.path.basename(photo_path)}")
                return face_encodings[0]
            else:
                raise Exception("–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ.")
                
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {str(e)}")
    
    def delete_user(self):
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected_item = self.users_tree.selection()
        if not selected_item:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        
        user_data = self.users_tree.item(selected_item)
        user_id = user_data['values'][0]
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?"):
            if self.db.delete_user(user_id):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
                self.refresh_user_list()
                self.load_encodings()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    
    def refresh_user_list(self):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for item in self.users_tree.get_children():
            self.users_tree.delete(item)
        
        users = self.db.get_all_users()
        for user in users:
            self.users_tree.insert("", "end", values=(user[1], user[2]))
    
    def on_closing(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.stop_camera()
        self.root.destroy()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = ModernFaceRecognitionApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()